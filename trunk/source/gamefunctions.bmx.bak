global CHAT_CHANNEL_NONE:int	= 0
global CHAT_CHANNEL_DEBUG:int	= 1
global CHAT_CHANNEL_SYSTEM:int	= 2
global CHAT_CHANNEL_PRIVATE:int	= 4
'normal chat channels
global CHAT_CHANNEL_LOBBY:int	= 8
global CHAT_CHANNEL_INGAME:int	= 16
global CHAT_CHANNEL_OTHER:int	= 32
global CHAT_CHANNEL_GLOBAL:int	= 56	'includes LOBBY, INGAME, OTHER

global CHAT_COMMAND_NONE:int	= 0
global CHAT_COMMAND_WHISPER:int	= 1
global CHAT_COMMAND_SYSTEM:int	= 2



Function Font_AddGradient:TGW_BitmapFontChar(font:TGW_BitmapFont, charKey:string, char:TGW_BitmapFontChar, config:TData=null)
	if not char.img then return char 'for "space" and other empty signs
	local pixmap:TPixmap	= LockImage(char.img)
	'convert to rgba
	If pixmap.format = PF_A8 Then pixmap = pixmap.convert(PF_RGBA8888)
'	pixmap = pixmap.convert(PF_A8)
	if not config then config = TData.Create()

	'gradient
	local color:int
	local gradientTop:int	= config.GetInt("gradientTop", 255)
	local gradientBottom:int= config.GetInt("gradientBottom", 100)
	local gradientSteps:int = font.GetMaxCharHeight()
	local onStep:int		= Max(0, char.area.GetY() -2)
	local brightness:int	= 0

	for local y:int = 0 to pixmap.height-1
		brightness = 255 - onStep * (gradientTop - gradientBottom) / gradientSteps
		onStep :+1
		for local x:int = 0 to pixmap.width-1
			color = ARGB_Color( ARGB_Alpha( ReadPixel(pixmap, x,y) ), brightness, brightness, brightness)
			WritePixel(pixmap, x,y, color)
		next
	next
	char.img = LoadImage(pixmap)

	'in all cases we need a pf_rgba8888 font to make gradients work (instead of pf_A8)
	font._pixmapFormat = PF_RGBA8888

	return char
End Function


Function Font_AddShadow:TGW_BitmapFontChar(font:TGW_BitmapFont, charKey:string, char:TGW_BitmapFontChar, config:TData=null)
	if not char.img then return char 'for "space" and other empty signs

	if not config then config = TData.Create()
	local shadowSize:int = config.GetInt("size", 0)
	'nothing to do?
	if shadowSize=0 then return char
	local pixmap:TPixmap	= LockImage(char.img) ;If pixmap.format = PF_A8 Then pixmap = pixmap.convert(PF_RGBA8888)
	local stepX:float		= float(config.GetString("stepX", "0.75"))
	local stepY:float		= float(config.GetString("stepY", "1.0"))
	local intensity:float	= float(config.GetString("intensity", "0.75"))
	local blur:float		= float(config.GetString("blur", "0.5"))
 	local width:int			= pixmap.width + shadowSize
	local height:int		= pixmap.height + shadowSize

	local newPixmap:TPixmap = TPixmap.Create(width, height, PF_RGBA8888)
	newPixmap.ClearPixels(0)

	if blur > 0.0
		DrawImageOnImage(pixmap, newPixmap, 1,1, TColor.Create(0,0,0,1.0))
		blurPixmap(newPixmap,0.5)
	endif

	'shadow
	for local i:int = 0 to shadowSize
		DrawImageOnImage(pixmap, newPixmap, int(i*stepX),int(i*stepY), TColor.Create(0,0,0,intensity/i))
	Next
	'original image
	DrawImageOnImage(pixmap, newPixmap, 0,0)

	'increase character dimension
	char.charWidth :+ shadowSize
	char.area.dimension.moveXY(shadowSize, shadowSize)

	char.img = LoadImage(newPixmap)

	'in all cases we need a pf_rgba8888 font to make gradients work (instead of pf_A8)
	font._pixmapFormat = PF_RGBA8888

	return char
End Function



Type TGUIChat extends TGUIGameWindow
	field guiPanel:TGUIBackgroundBox
	field _defaultTextColor:TColor		= TColor.Create(0,0,0)
	field _defaultHideEntryTime:int		= null
	field _channels:int					= 0		'bitmask of channels the chat listens to
	field guiList:TGUIListBase			= Null
	field guiInput:TGUIInput			= Null
	field guiInputPositionRelative:int	= 0		'is the input is inside the chatbox or absolute
	field guiInputHistory:TList			= CreateList()
	field keepInputActive:int			= TRUE

	global antiSpamTimer:int			= 0		'time when again allowed to send
	global antiSpamTime:int				= 100


	Method Create:TGUIChat(x:int,y:int,width:int,height:int, State:string="")
		super.Create(x,y,width,height, State)

		guiPanel = AddContentBox(0,0,GetContentScreenWidth()-10,-1)

		guiList = new TGUIListBase.Create(10,10,GetContentScreenWidth(),GetContentScreenHeight(),State)
		guiList.setOption(GUI_OBJECT_ACCEPTS_DROP, false)
		guiList.autoSortItems = false
		guiList.SetAcceptDrop("")
		guiList.setParent(self)
		guiList.autoScroll = true
		guiList.SetBackground(null)


		guiInput = new TGUIInput.Create(0, height, width,-1, "", 32, State)
		guiInput.setParent(self)

		'guiPanel.AddChild(guiPanel, false)
		'guiPanel.AddChild(guiInput, false)

		'we manage the panel
		AddChild(guiPanel)


		'resize base and move child elements
		resize(width,height)

		'by default all chats want to list private messages and system announcements
		setListenToChannel(CHAT_CHANNEL_PRIVATE, true)
		setListenToChannel(CHAT_CHANNEL_SYSTEM, true)
		setListenToChannel(CHAT_CHANNEL_GLOBAL, true)

		'register events
		'- observe text changes in our input field
		EventManager.registerListenerFunction( "guiobject.onChange", self.onInputChange, self.guiInput )
		'- observe wishes to add a new chat entry - listen to all sources
		EventManager.registerListenerMethod( "chat.onAddEntry", self, "onAddEntry" )

		GUIManager.Add( self )

		return self
	End Method


	'returns boolean whether chat listens to a channel
	Method isListeningToChannel:int(channel:int)
		return self._channels & channel
	End Method


	Method setListenToChannel(channel:int, enable:int=TRUE)
		if enable
			self._channels :| channel
		else
			self._channels :& ~channel
		endif
	End Method


	Method SetDefaultHideEntryTime(milliseconds:int=null)
		self._defaultHideEntryTime = milliseconds
	End Method


	Method SetDefaultTextColor(color:TColor)
		self._defaultTextColor = color
	End Method


	Function onInputChange:int( triggerEvent:TEventBase )
		local guiInput:TGUIInput = TGUIInput(triggerEvent.getSender())
		if guiInput = Null then return FALSE

		local guiChat:TGUIChat = TGUIChat(guiInput._parent)
		if guiChat = Null then return FALSE

		'skip empty text
		if guiInput.value.trim() = "" then return FALSE

		'emit event : chats should get a new line
		'- step A) is to get what channels we want to announce to
		local sendToChannels:int = guiChat.getChannelsFromText(guiInput.value)
		'- step B) is emitting the event "for all"
		'  (the listeners have to handle if they want or ignore the line
		EventManager.triggerEvent( TEventSimple.Create( "chat.onAddEntry", TData.Create().AddNumber("senderID", Game.playerID).AddNumber("channels", sendToChannels).AddString("text",guiInput.value) , guiChat ) )

		'avoid getting the enter-key registered multiple times
		'which leads to "flickering"
		KEYMANAGER.blockKey(KEY_ENTER, 250) 'block for 100ms

		'trigger antiSpam
		guiChat.antiSpamTimer = Millisecs() + guiChat.antiSpamTime

		if guiChat.guiInputHistory.last() <> guiInput.value
			guiChat.guiInputHistory.AddLast(guiInput.value)
		endif

		'reset input field
		guiInput.value = ""
	End Function


	Method onAddEntry:int( triggerEvent:TEventBase )
		local guiChat:TGUIChat = TGUIChat(triggerEvent.getReceiver())
		'if event has a specific receiver and this is not a chat - we are not interested
		if triggerEvent.getReceiver() AND not guiChat then return FALSE
		'found a chat - but it is another chat
		if guiChat and guiChat <> self then return FALSE

		'here we could add code to exlude certain other chat channels
		local sendToChannels:int = triggerEvent.getData().getInt("channels", 0)
		if self.isListeningToChannel(sendToChannels)
			self.AddEntryFromData( triggerEvent.getData() )
		else
			print "onAddEntry - unknown channel, not interested"
		endif
	End Method


	Function getChannelsFromText:int(text:string)
		local sendToChannels:int = 0 'by default send to no channel
		Select getSpecialCommandFromText(text)
			case CHAT_COMMAND_WHISPER
				sendToChannels :| CHAT_CHANNEL_PRIVATE
			default
				sendToChannels :| CHAT_CHANNEL_GLOBAL
		end Select
		return SendToChannels
	End Function


	Function getSpecialCommandFromText:int(text:string)
		text = text.trim()

		if Left( text,1 ) <> "/" then return CHAT_COMMAND_NONE

		local spacePos:int = instr(text, " ")
		local commandString:string = Mid(text, 2, spacePos-2 ).toLower()
		local payload:string = Right(text, text.length -spacePos)

		select commandString
			case "fluestern", "whisper", "w"
				'local spacePos:int = instr(payload, " ")
				'local target:string = Mid(payload, 1, spacePos-1 ).toLower()
				'local message:string = Right(payload, payload.length -spacePos)
				'print "whisper to: " + "-"+target+"-"
				'print "whisper msg:" + message
				return CHAT_COMMAND_WHISPER
			default
				'print "command: -"+commandString+"-"
				'print "payload: -"+payload+"-"
				return CHAT_COMMAND_NONE
		end select
	End Function


	Method AddEntry(entry:TGUIListItem)
		guiList.AddItem(entry)
	End Method


	Method AddEntryFromData( data:TData )
		local text:string		= data.getString("text", "")
		local textColor:TColor	= TColor( data.get("textColor") )
		local senderID:int		= data.getInt("senderID", 0)
		local senderName:string	= ""
		local senderColor:TColor= Null

		if Game.isPlayer(senderID)
			senderName	= Game.Players[senderID].Name
			senderColor	= Game.Players[senderID].color
			if not textColor then textColor = self._defaultTextColor
		else
			senderName	= "SYSTEM"
			senderColor	= TColor.Create(255,100,100)
			textColor	= TColor.Create(255,100,100)
		endif


		'finally add to the chat box
		local entry:TGUIChatEntry = new TGUIChatEntry.CreateSimple(text, textColor, senderName, senderColor, null )
		'if the default is "null" then no hiding will take place
		entry.SetShowtime( _defaultHideEntryTime )
		AddEntry( entry )
	End Method


	Method SetPadding:int(top:int,left:int,bottom:int,right:int)
		padding.setTLBR(top,left,bottom,right)
		resize()
	End Method


	'override resize and add minSize-support
	Method Resize(w:float=Null,h:float=Null)
		super.Resize(w,h)

		'background covers whole area, so resize it
		if guiBackground then guiBackground.resize(rect.getW(), rect.getH())

		local contentWidth:int = GetContentScreenWidth()
		local contentHeight:int = GetContentScreenHeight()
		if guiPanel
			guiPanel.Resize(contentWidth, contentHeight)
			contentWidth = guiPanel.GetContentScreenWidth()
			contentHeight = guiPanel.GetContentScreenHeight()
		endif

		local subtractInputHeight:float = 0.0
		'move and resize input field to the bottom
		if guiInput and not guiInput.hasOption(GUI_OBJECT_POSITIONABSOLUTE)
			guiInput.resize(GetContentScreenWidth(),null)
			'ignore panel padding...
			guiInput.rect.position.setXY(0, GetContentScreenHeight() - guiInput.rect.getH())
			subtractInputHeight = guiInput.rect.getH()
		endif

		'move and resize the listbox (subtract input if needed)
		if guiList then guiList.resize(contentWidth, GetContentScreenHeight() - 10 - subtractInputHeight)
	End Method


	'override default update-method
	Method Update:int()
		super.Update()

		'show items again if somone hovers over the list (-> reset timer)
		if self.guiList._mouseOverArea
			for local entry:TGuiObject = eachin self.guiList.entries
				entry.show()
			next
		endif
	End Method


	Method Draw()
		Super.Draw()
	End Method
End Type


Type TGUIGameWindow extends TGUIWindow
	field contentBoxes:TGUIBackgroundBox[]

	global childSprite:TGW_NinePatchSprite


	Method Create:TGUIGameWindow(x:Int, y:Int, width:Int = 100, height:Int= 100, State:String = "")
		Super.Create(x,y,width,height,State)

		GetPadding().SetTop(35)

		SetCaptionArea(TRectangle.Create(20, 10, GetContentScreenWidth() - 2*20, 25))
		guiCaptionTextBox.SetValueAlignment("LEFT", "TOP")

		if not childSprite then childSprite = Assets.GetNinePatchSprite("gfx_gui_panel.content")

		return self
	End Method


	'special handling for child elements of kind GuiGameBackgroundBox
	Method AddContentBox:TGUIBackgroundBox(displaceX:int=0, displaceY:int=0, w:int=-1, h:int=-1)
		if w < 0 then w = GetContentScreenWidth()
		if h < 0 then h = GetContentScreenHeight()

		'replace single-content-window-sprite (aka: remove "drawn on"-contentimage)
		self.guiBackground.sprite = Assets.GetNinePatchSprite("gfx_gui_panel")

		local maxOtherBoxesY:int = 0
		if children
			for local box:TGUIBackgroundBox = eachin contentBoxes
				maxOtherBoxesY = max(maxOtherBoxesY, box.rect.GetY() + box.rect.GetH())
				'after each box we want a gap
				maxOtherBoxesY :+ TGUISettings.panelGap
			Next
		endif
		local box:TGUIBackgroundBox = new TGUIBackgroundBox.Create(displaceX, maxOtherBoxesY + displaceY, w, h, "")

		box.sprite = childSprite
		box.spriteAlpha = 1.0
		box.SetPadding(TGUISettings.panelGap,TGUISettings.panelGap,TGUISettings.panelGap,TGUISettings.panelGap)
		AddChild(box)

		contentBoxes = contentBoxes[.. contentBoxes.length +1]
		contentBoxes[contentBoxes.length-1] = box


		'resize self so it fits
		local newHeight:int = box.rect.GetY() + box.rect.GetH()
		'add padding
		newHeight :+ GetPadding().GetTop() + GetPadding().GetBottom()
		resize(rect.GetW(), Max(rect.GetH(), newHeight))

		return box
	End Method


	Method Update:int()
		if guiCaptionTextBox then guiCaptionTextBox.useFont = .headerFont
		'self.guiTextBox.useFont = .modalWindowTextFont

		Super.Update()
	End Method
End Type




Type TGUIGameModalWindow extends TGUIModalWindow
	Method Create:TGUIGameModalWindow(x:Int, y:Int, width:Int = 100, height:Int= 100, limitState:String = "")
		_defaultValueColor = TColor.clBlack.copy()
		_defaultCaptionColor = TColor.clWhite.copy()
		Super.Create(x,y,width,height,limitState)

'		GetPadding().SetTop(35)

		SetCaptionArea(TRectangle.Create(20, 10, GetContentScreenWidth() - 2*20, 25))
		guiCaptionTextBox.SetValueAlignment("CENTER", "TOP")


		return self
	End Method

	Method SetCaption:int(caption:string="")
		Super.SetCaption(caption)
		if guiCaptionTextBox then guiCaptionTextBox.useFont = .headerFont
	End Method
End Type




Type TGUIChatEntry extends TGUIListItem
	field paddingBottom:int		= 5


	Method CreateSimple:TGUIChatEntry(text:string, textColor:TColor, senderName:string, senderColor:TColor, lifetime:int=null)
		Create(text)
		SetLifetime(lifeTime)
		SetShowtime(lifeTime)
		SetSender(senderName, senderColor)
		SetLabel(text,textColor)

		return self
	End Method


    Method Create:TGUIChatEntry(text:string="",x:float=0.0,y:float=0.0,width:int=120,height:int=20)
		'no "super.Create..." as we do not need events and dragable and...
   		super.CreateBase(x,y,"",null)

		Resize( width, height )
		label = text

		setLifetime( 1000 )
		setShowtime( 1000 )

		GUIManager.add(self)

		return self
	End Method


	Method getDimension:TPoint()
		local move:TPoint = TPoint.Create(0,0)
		if self.Data.getString("senderName",null)
			local senderColor:TColor = TColor(self.Data.get("senderColor"))
			if not senderColor then senderColor = TColor.Create(0,0,0)
			move = Assets.fonts.baseFontBold.drawStyled(self.Data.getString("senderName")+":", self.getScreenX(), self.getScreenY(), senderColor, 2, 0)
			'move the x so we get space between name and text
			'move the y point 1 pixel as bold fonts are "higher"
			move.setXY( move.x+5, 1)
		endif
		'available width is parentsDimension minus startingpoint
		local parentPanel:TGUIScrollablePanel = TGUIScrollablePanel(self.getParent("tguiscrollablepanel"))
		local maxWidth:int = parentPanel.getContentScreenWidth()-self.rect.getX()
		local maxHeight:int = 2000 'more than 2000 pixel is a really long text

		local dimension:TPoint = Assets.fonts.baseFont.drawBlock(label, getScreenX()+move.x, getScreenY()+move.y, maxWidth-move.X, maxHeight, null, null, 2, 0)

		'add padding
		dimension.moveXY(0, self.paddingBottom)

		'set current size and refresh scroll limits of list
		'but only if something changed (eg. first time or content changed)
		if self.rect.getW() <> dimension.getX() OR self.rect.getH() <> dimension.getY()
			'resize item
			self.Resize(dimension.getX(), dimension.getY())
			'recalculate item positions and scroll limits
'			local list:TGUIListBase = TGUIListBase(self.getParent("tguilistbase"))
'			if list then list.RecalculateElements()
		endif

		return dimension
	End Method


	Method SetSender:int(senderName:string=Null, senderColor:TColor=Null)
		if senderName then self.Data.AddString("senderName", senderName)
		if senderColor then self.Data.Add("senderColor", senderColor)
	End Method


	Method getParentWidth:float(parentClassName:string="toplevelparent")
		if not self._parent then return self.rect.getW()
		return self.getParent(parentClassName).rect.getW()
	End Method


	Method getParentHeight:float(parentClassName:string="toplevelparent")
		if not self._parent then return self.rect.getH()
		return self.getParent(parentClassName).rect.getH()
	End Method


	Method Draw:int()
		self.getParent("tguilistbase").RestrictViewPort()

		if self.showtime <> Null then setAlpha float(self.showtime-Millisecs())/500.0
		'available width is parentsDimension minus startingpoint
		local parentPanel:TGUIScrollablePanel = TGUIScrollablePanel(self.getParent("tguiscrollablepanel"))
		local maxWidth:int = parentPanel.getContentScreenWidth()-self.rect.getX()

		'local maxWidth:int = self.getParentWidth("tguiscrollablepanel")-self.rect.getX()
		local maxHeight:int = 2000 'more than 2000 pixel is a really long text

		local move:TPoint = TPoint.Create(0,0)
		if self.Data.getString("senderName",null)
			local senderColor:TColor = TColor(self.Data.get("senderColor"))
			if not senderColor then senderColor = TColor.Create(0,0,0)
			move = Assets.fonts.baseFontBold.drawStyled(self.Data.getString("senderName", "")+":", self.getScreenX(), self.getScreenY(), senderColor, 2, 1)
			'move the x so we get space between name and text
			'move the y point 1 pixel as bold fonts are "higher"
			move.setXY( move.x+5, 1)
		endif
		Assets.fonts.baseFont.drawBlock(label, getScreenX()+move.x, getScreenY()+move.y, maxWidth-move.X, maxHeight, null, labelColor, 2, 1, 0.5)

		setAlpha 1.0

		self.getParent("tguilistbase").ResetViewPort()
	End Method
End Type




'create a custom type so we can check for doublettes on add
Type TGUIGameList Extends TGUISelectList


    Method Create:TGUIGameList(x:Int, y:Int, width:Int, height:Int = 50, State:String = "")
		super.Create(x,y,width,height, State)

		return self
	end Method


	'override default
	Method RegisterListeners:int()
		'we want to know about clicks
		EventManager.registerListenerMethod( "guiobject.onClick",	self, "onClickOnEntry", "TGUIGameEntry" )
	End Method


	Method onClickOnEntry:Int(triggerEvent:TEventBase)
		local entry:TGUIGameEntry = TGUIGameEntry( triggerEvent.getSender() )
		if not entry then return FALSE

		return super.onClickOnEntry(triggerEvent)
	End Method


	Method AddItem:int(item:TGUIobject, extra:object=null)
		for local olditem:TGUIListItem = eachin self.entries
			if TGUIGameEntry(item) and TGUIGameEntry(item).label = olditem.label
				'refresh lifetime
				olditem.setLifeTime(olditem.initialLifeTime)
				'unset the new one
				item.remove()
				return FALSE
			endif
		next
		return Super.AddItem(item, extra)
	End Method
End Type




Type TGUIGameEntry extends TGUISelectListItem
	field paddingBottom:int		= 3
	field paddingTop:int		= 2


	Method CreateSimple:TGUIGameEntry(_hostIP:string, _hostPort:int, _hostName:string="", gameTitle:string="", slotsUsed:int, slotsMax:int)
		'make it "unique" enough
		self.Create(_hostIP+":"+_hostPort)

		self.data.AddString("hostIP", _hostIP)
		self.data.AddNumber("hostPort", _hostPort)
		self.data.AddString("hostName", _hostName)
		self.data.AddString("gameTitle", gametitle)
		self.data.AddNumber("slotsUsed", slotsUsed)
		self.data.AddNumber("slotsMax", slotsMax)

		return self
	End Method


    Method Create:TGUIGameEntry(text:string="",x:float=0.0,y:float=0.0,width:int=120,height:int=20)
		'no "super.Create..." as we do not need events and dragable and...
   		super.CreateBase(x,y,"",null)

		self.SetLifetime(30000) '30 seconds
		self.SetLabel(":D", TColor.Create(0,0,0))

		self.Resize( width, height )

		GUIManager.add(self)

		return self
	End Method


	Method getDimension:TPoint()
		'available width is parentsDimension minus startingpoint
		local parentPanel:TGUIScrollablePanel = TGUIScrollablePanel(self.getParent("tguiscrollablepanel"))
		local maxWidth:int = parentPanel.getContentScreenWidth()-self.rect.getX()
		local maxHeight:int = 2000 'more than 2000 pixel is a really long text

		local text:string = self.Data.getString("gameTitle","#unknowngametitle#")+" by "+ self.Data.getString("hostName","#unknownhostname#") + " ("+self.Data.getInt("slotsUsed",1)+"/"+self.Data.getInt("slotsMax",4)
		local dimension:TPoint = Assets.fonts.baseFont.drawBlock(text, getScreenX(), getScreenY(), maxWidth, maxHeight, null, null, 2, 0)

		'add padding
		dimension.moveXY(0, self.paddingBottom)

		'set current size and refresh scroll limits of list
		'but only if something changed (eg. first time or content changed)
		if self.rect.getW() <> dimension.getX() OR self.rect.getH() <> dimension.getY()
			'resize item
			self.Resize(dimension.getX(), dimension.getY())
		endif

		return dimension
	End Method


	Method Draw:int()
		'self.getParent("topitem").RestrictViewPort()

		if self.showtime <> Null then setAlpha float(self.showtime-Millisecs())/500.0

		'draw highlight-background etc
		Super.Draw()

		'draw text
		local move:TPoint = TPoint.Create(0, self.paddingTop)
		local text:string = ""
		local textColor:TColor = null
		local textDim:TPoint = null
		'line: title by hostname (slotsused/slotsmax)

		text 		= self.Data.getString("gameTitle","#unknowngametitle#")
		textColor	= TColor(self.Data.get("gameTitleColor", TColor.Create(150,80,50)) )
		textDim		= Assets.fonts.baseFontBold.drawStyled(text, self.getScreenX() + move.x, self.getScreenY() + move.y, textColor, 2, 1,0.5)
		move.moveXY(textDim.x,1)

		text 		= " by "+self.Data.getString("hostName","#unknownhostname#")
		textColor	= TColor(self.Data.get("hostNameColor", TColor.Create(50,50,150)) )
		textDim		= Assets.fonts.baseFontBold.drawStyled(text, self.getScreenX() + move.x, self.getScreenY() + move.y, textColor)
		move.moveXY(textDim.x,0)

		text 		= " ("+self.Data.getInt("slotsUsed",1)+"/"++self.Data.getInt("slotsMax",4)+")"
		textColor	= TColor(self.Data.get("hostNameColor", TColor.Create(0,0,0)) )
		textDim		= Assets.fonts.baseFontBold.drawStyled(text, self.getScreenX() + move.x, self.getScreenY() + move.y, textColor)
		move.moveXY(textDim.x,0)

		setAlpha 1.0

		'self.getParent("topitem").ResetViewPort()
	End Method
End Type




Type THotspot
	Field area:TRectangle			= TRectangle.Create(0,0,0,0)
	Field name:string				= ""
	Field tooltip:TTooltip			= null
	Field tooltipText:string		= ""
	Field tooltipDescription:string	= ""
	Field hovered:int				= FALSE


	Method Create:THotSpot(name:string, x:int,y:int,w:int,h:int)
		self.area = TRectangle.Create(x,y,w,h)
		self.name = name
		return self
	End Method


	Method setTooltipText( text:string="", description:string="" )
		self.tooltipText		= text
		self.tooltipDescription = description
	End Method


	Method Update:int(offsetX:int=0,offsetY:int=0)
		'update tooltip
		'handle clicks -> send events so eg can send figure to it

		local adjustedArea:TRectangle = area.copy()
		adjustedArea.position.moveXY(offsetX, offsetY)

		if adjustedArea.containsXY(MOUSEMANAGER.x, MOUSEMANAGER.y)
			hovered = TRUE
			if MOUSEMANAGER.isClicked(1)
				EventManager.triggerEvent( TEventSimple.Create("hotspot.onClick", TData.Create() , self ) )
			endif
		else
			hovered = FALSE
		endif

		if hovered
			if tooltip
				tooltip.Hover()
			elseif tooltipText<>""
				tooltip = TTooltip.Create(tooltipText, tooltipDescription, 100, 140, 0, 0)
				tooltip.enabled = true
			endif
		endif

		If tooltip AND tooltip.enabled
			tooltip.area.position.SetXY( adjustedArea.getX() + adjustedArea.getW()/2 - tooltip.GetWidth()/2, adjustedArea.getY() - tooltip.GetHeight())
			tooltip.Update( App.Timer.getTimeStep() )
			'delete old tooltips
			if tooltip.lifetime < 0 then tooltip = null
		EndIf
	End Method


	Method Draw:int(offsetX:int=0,offsetY:int=0)
		if tooltip then tooltip.draw()
	End Method
End Type




Type TSaveFile
	Field xml:TXmlHelper
	Field node:TxmlNode
	Field currentnode:TxmlNode
	Field Nodes:TxmlNode[10]
	Field NodeDepth:Int = 0
	Field lastNode:TxmlNode


	Function Create:TSaveFile()
		return New TSaveFile
	End Function


	Method InitSave()
		self.xml		= new TXmlHelper
		self.xml.file	= TxmlDoc.newDoc("1.0")
		Self.xml.root 	= TxmlNode.newNode("tvtsavegame")
		self.xml.file.setRootElement(self.xml.root)
		Self.Nodes[0]	= xml.root
		Self.lastNode	= xml.root
	End Method


	Method InitLoad(filename:String="save.xml", zipped:Byte=0)
		self.xml		= new TXmlHelper
		self.xml.file	= TxmlDoc.parseFile(filename)
		Self.xml.root	= xml.file.getRootElement()
		Self.node		= Self.xml.root
	End Method


	Method xmlWrite(typ:String="unknown",str:String, newDepth:Byte=0, depth:Int=-1)
		If depth <=-1 Or depth >=10 Then depth = Self.NodeDepth ';newDepth=False
		If newDepth
			Self.Nodes[Self.NodeDepth+1] = Self.Nodes[depth].addChild( typ )
			Self.Nodes[Self.NodeDepth+1].addAttribute("var", str)
			Self.NodeDepth:+1
		Else
			Self.Nodes[depth].addChild( typ ).addAttribute("var", str)
		EndIf
	End Method


	Method xmlCloseNode()
		Self.NodeDepth:-1
	End Method


	Method xmlBeginNode(str:String)
		Self.Nodes[Self.NodeDepth + 1] = Self.Nodes[Self.NodeDepth].AddChild( str )
		Self.NodeDepth:+1
	End Method


	Method xmlSave(filename:String="-", zipped:Byte=0)
		If filename = "-" Then Print "nodes:"+Self.xml.root.getChildren().count() Else Self.xml.file.saveFile(filename)
	End Method

'deprecated
rem
	'Summary: saves an object to defined XMLstream
	Method SaveObject:Int(obj:Object, nodename:String, _addfunc(obj:Object))
		Local result:String = ""
	    Self.xmlBeginNode(nodename)
			'list of objects as obj-param - iterate through all listobjects
			If TList(obj) <> Null
				For Local listobj:Object = EachIn TList(obj)
					SaveObject(listobj, nodename + "_CHILD", _addfunc)
				Next
			Else
				Local typ:TTypeId = TTypeId.ForObject(obj)
				For Local t:TField = EachIn typ.EnumFields()
					If t.MetaData("sl") <> "no"
						local fieldtype:TTypeId = TTypeId.ForObject(t.get(obj))
						If fieldtype.ExtendsType(ArrayTypeId)
							If fieldtype.ArrayLength(typ) > 0
								Print "array '" + t.Name() + " - " + fieldtype.Name() + "'"
							EndIf
						End If
						If TList(t.get(obj)) <> Null
							Local liste:TList = TList(t.get(obj))
							For Local childobj:Object = EachIn liste
								Print "saving list children..."
								Self.SaveObject(childobj, nodename + "_CHILD", _addfunc)
							Next
						Else
							Self.xmlWrite(Upper(t.name()), String(t.get(obj)))
						End If
					EndIf
				Next
				If _addfunc <> Null Then _addfunc(obj)
			EndIf
		Self.xmlCloseNode()
	End Method
endrem

	'Summary: loads an object from a XMLstream
	Method LoadObject:Object(obj:Object, _handleNodefunc(_obj:Object, _node:txmlnode))
		print "implement LoadObject"
		return null
	End Method
End Type
Global LoadSaveFile:TSaveFile = TSaveFile.Create()





'tooltips containing headline and text, updated and drawn by Tinterface
Type TTooltip extends TRenderable
	Field lifetime:float		= 0.1		'how long this tooltip is existing
	Field fadeValue:float		= 1.0		'current fading value (0-1.0)
	Field _startLifetime:float	= 1.0		'initial lifetime value
	Field _startFadingTime:float= 0.20		'at which lifetime fading starts
	Field title:String
	Field content:String
	Field image:TImage			= Null
	Field dirtyImage:Int		= 1
	Field tooltipImage:Int		=-1
	Field titleBGtype:Int		= 0
	Field enabled:Int			= 0
	Field _oldTitle:String

	Global tooltipHeader:TGW_Sprite
	Global tooltipIcons:TGW_Sprite
	Global list:TList 			= CreateList()

	Global useFontBold:TGW_BitmapFont
	Global useFont:TGW_BitmapFont
	Global imgCacheEnabled:int	= TRUE


	Function Create:TTooltip(title:String = "", content:String = "unknown", x:Int = 0, y:Int = 0, w:Int = -1, h:Int = -1, lifetime:Int = 300)
		Local obj:TTooltip = New TTooltip
		obj.Initialize(title, content, x, y, w, h, lifetime)

		list.addLast(obj)
		Return obj
	End Function


	Method Initialize:int(title:string="", content:string="unknown", x:int=0, y:int=0, w:int=-1, h:int=-1, lifetime:int=300)
		self.title				= title
		self._oldTitle			= title
		self.content			= content
		self.area				= TRectangle.Create(x, y, w, h)
		self.tooltipimage		= -1
		self._startLifetime		= float(lifetime) / 1000.0 	'in seconds
		self._startFadingTime	= Min(_startLifetime/2.0, 0.1)
		self.Hover()
	end Method


	'reset lifetime
	Method Hover()
		lifeTime 	= _startLifetime
		fadeValue	= 1.0
	End Method


	Method Update:Int(deltaTime:float=1.0)
		lifeTime :- deltaTime

		'start fading if lifetime is running out (lower than fade time)
		if lifetime <= _startFadingTime
			fadeValue :- deltaTime
			fadeValue :* 0.8 'speed up fade
		endif

		If lifeTime <= 0 ' And enabled 'enabled - as pause sign?
			Image	= Null
			enabled	= False
			List.remove(Self)
		EndIf

		if dirtyImage
			'limit to visible areas
			area.position.SetX( Max(21, Min(area.GetX(), 759 - GetWidth())) )
			'limit to screen too
			area.position.SetY( Max(10, Min(area.GetY(), 600 - GetHeight())) )
		endif
	End Method


	Method getWidth:Int()
		If not DirtyImage and Image and imgCacheEnabled then return image.width

		'manual config
		if area.GetW() > 0 then return area.GetW()

		'auto width calculation
		if area.GetW() <= 0
			local result:int = 0
			'width from title + content + spacing
			result = UseFontBold.getWidth(title)+6
			'add icon to width
			If tooltipimage >=0 Then result:+ ToolTipIcons.framew + 2
			'compare with content text width
			result = max(GetContentWidth() + 6, result)
			result :+ 4 'extra spacing
			return result
		EndIf
	End Method


	Method getHeight:int()
		If not DirtyImage and Image and imgCacheEnabled then return image.height

		'manual config
		if area.GetH() > 0 then return area.GetH()

		'auto height calculation
		if area.GetH() <= 0
			local result:int = 0
			'height from title + content + spacing
			result:+ getTitleHeight()
			result:+ getContentHeight()
			return result
		endif
	End Method


	Method getTitleHeight:int()
		local result:int = TooltipHeader.area.GetH()
		'add icon to height of caption
		'If tooltipimage >= 0 Then result :+ 2
		return result
	End Method


	Method getContentWidth:int()
		'only add a line if there is text
		If Len(content)>1 Then return UseFont.getWidth(content)
		return 0
	End Method


	Method getContentHeight:int()
		'only add a line if there is text
		If Len(content)>1 Then return UseFont.getHeight(content) + 8
		return 0
	End Method


	Method DrawShadow(width:float, height:float)
		SetColor 0, 0, 0
		SetAlpha getFadeAmount() * 0.3
		DrawRect(area.GetX()+2, area.GetY()+2, width, height)

		SetAlpha getFadeAmount() * 0.1
		DrawRect(area.GetX()+1, area.GetY()+1, width, height)
		SetColor 255,255,255
	End Method


	Method getFadeAmount:float()
		return fadeValue
'		if (startLifetime - lifetime) >= startFadeTime then return 1.0

'		return (100.0 * (fadeTime - startFadeTime)) / 100.0
	End Method


	Method DrawHeader:int(x:float, y:float, width:int, height:int)
		If TitleBGtype = 0 Then SetColor 250,250,250
		If TitleBGtype = 1 Then SetColor 200,250,200
		If TitleBGtype = 2 Then SetColor 250,150,150
		If TitleBGtype = 3 Then SetColor 200,200,250
		TooltipHeader.TileDraw(x, y, width, height)

		SetColor 255,255,255
		local displaceX:float = 0.0
		If tooltipimage >=0
			TTooltip.ToolTipIcons.Draw(x, y, tooltipimage)
			displaceX = TTooltip.ToolTipIcons.framew
		endif
'		SetAlpha getFadeAmount()
		'caption
		useFontBold.drawStyled(title, x+5+displaceX, y+height/2 - useFontBold.getHeight("ABC")/2 +2 , TColor.Create(50,50,50), 2, 1, 0.1)
'		SetAlpha 1.0
	end Method


	Method DrawContent:int(x:int, y:int, width:int, height:int)
		SetColor 90,90,90
		'content
		If content <> "" Then Usefont.draw(content, area.GetX()+5,area.GetY()+TooltipHeader.area.GetH() + 7)
		SetColor 255, 255, 255
	End Method


	Method Draw:Int(tweenValue:float=1.0)
		If Not enabled Then Return 0

		'reset cache if title changes
		'TODO RONNY: make obsolete and take care in correct position
		If title <> _oldTitle then DirtyImage = True


		If DirtyImage Or not Image OR not imgCacheEnabled
			Local boxWidth:Int	= GetWidth()
			Local boxHeight:Int	= GetHeight()
			local captionHeight:int = GetTitleHeight()
			DrawShadow(boxWidth, boxHeight)

			SetAlpha getFadeAmount()
			SetColor 0,0,0
			'border
			DrawRect(area.GetX(), area.GetY(), boxWidth, boxHeight)
			'bright background
			SetColor 255,255,255
			DrawRect(area.GetX()+1, area.GetY()+1, boxWidth-2, boxHeight-2)

			'draw header including caption and header background
			DrawHeader(area.GetX()+1, area.GetY()+1, boxWidth-2, captionHeight)

			'draw content - do not use contentHeight here..
			'if boxHeight was defined manually we just give it the left space
			'as a caption has to get drawn in all cases...
			DrawContent(area.GetX()+1, area.GetY()+1 + captionHeight, boxWidth-2, boxHeight-captionHeight-2)


			If imgCacheEnabled 'And lifetime = startlifetime
				Image = TImage.Create(boxWidth, boxHeight, 1, 0, 255, 0, 255)
				image.pixmaps[0] = VirtualGrabPixmap(self.area.GetX(), self.area.GetY(), boxWidth, boxHeight)
				DirtyImage = False
			EndIf
			_oldTitle = title
		Else 'not dirty
			DrawShadow(ImageWidth(image),ImageHeight(image))
			SetAlpha getFadeAmount()
			SetColor 255,255,255
			DrawImage(image, area.GetX(), area.GetY())
			SetAlpha 1.0
		EndIf
	End Method
End Type







	Function DrawDialog(dialogueType:string="default", x:Int, y:Int, width:Int, Height:Int, DialogStart:String = "StartDownLeft", DialogStartMove:Int = 0, DialogText:String = "", DialogFont:TGW_BitmapFont = Null)
		Local dx:Float, dy:Float
		Local DialogSprite:TGW_Sprite = Assets.getSprite(DialogStart)
		height = Max(95, height ) 'minheight
		If DialogStart = "StartLeftDown" Then dx = x - 48;dy = y + Height/3 + DialogStartMove;width:-48
		If DialogStart = "StartRightDown" Then dx = x + width - 12;dy = y + Height/2 + DialogStartMove;width:-48
		If DialogStart = "StartDownRight" Then dx = x + width/2 + DialogStartMove;dy = y + Height - 12;Height:-53
		If DialogStart = "StartDownLeft" Then dx = x + width/2 + DialogStartMove;dy = y + Height - 12;Height:-53

		Assets.GetNinePatchSprite("dialogue."+dialogueType).DrawArea(x,y,width,height)

		DialogSprite.Draw(dx, dy)
		If DialogText <> "" then DialogFont.drawBlock(DialogText, x + 10, y + 10, width - 16, Height - 16, null, TColor.clBlack)
	End Function

	'draws a rounded rectangle (blue border) with alphashadow
	Function DrawGFXRect(gfx_Rect:TGW_SpritePack, x:Int, y:Int, width:Int, Height:Int, nameBase:string="gfx_gui_rect_")
		gfx_Rect.getSprite(nameBase+"TopLeft").Draw(x, y)
		gfx_Rect.getSprite(nameBase+"TopRight").Draw(x + width, y,-1, TPoint.Create(ALIGN_RIGHT, ALIGN_TOP))
		gfx_Rect.getSprite(nameBase+"BottomLeft").Draw(x, y + Height, -1, TPoint.Create(ALIGN_LEFT, ALIGN_BOTTOM))
		gfx_Rect.getSprite(nameBase+"BottomRight").Draw(x + width, y + Height, -1, TPoint.Create(ALIGN_RIGHT, ALIGN_BOTTOM))

		gfx_Rect.getSprite(nameBase+"BorderLeft").TileDraw(x, y + gfx_Rect.getSprite(nameBase+"TopLeft").area.GetH(), gfx_Rect.getSprite(nameBase+"BorderLeft").area.GetW(), Height - gfx_Rect.getSprite(nameBase+"BottomLeft").area.GetH() - gfx_Rect.getSprite(nameBase+"TopLeft").area.GetH())
		gfx_Rect.getSprite(nameBase+"BorderRight").TileDraw(x + width - gfx_Rect.getSprite(nameBase+"BorderRight").area.GetW(), y + gfx_Rect.getSprite(nameBase+"TopLeft").area.GetH(), gfx_Rect.getSprite(nameBase+"BorderRight").area.GetW(), Height - gfx_Rect.getSprite(nameBase+"BottomRight").area.GetH() - gfx_Rect.getSprite(nameBase+"TopRight").area.GetH())
		gfx_Rect.getSprite(nameBase+"BorderTop").TileDraw(x + gfx_Rect.getSprite(nameBase+"TopLeft").area.GetW(), y, width - gfx_Rect.getSprite(nameBase+"TopLeft").area.GetW() - gfx_Rect.getSprite(nameBase+"TopRight").area.GetW(), gfx_Rect.getSprite(nameBase+"BorderTop").area.GetH())
		gfx_Rect.getSprite(nameBase+"BorderBottom").TileDraw(x + gfx_Rect.getSprite(nameBase+"BottomLeft").area.GetW(), y + Height - gfx_Rect.getSprite(nameBase+"BorderBottom").area.GetH(), width - gfx_Rect.getSprite(nameBase+"BottomLeft").area.GetW() - gfx_Rect.getSprite(nameBase+"BottomRight").area.GetW(), gfx_Rect.getSprite(nameBase+"BorderBottom").area.GetH())
		gfx_Rect.getSprite(nameBase+"Back").TileDraw(x + gfx_Rect.getSprite(nameBase+"TopLeft").area.GetW(), y + gfx_Rect.getSprite(nameBase+"TopLeft").area.GetH(), width - gfx_Rect.getSprite(nameBase+"TopLeft").area.GetW() - gfx_Rect.getSprite(nameBase+"TopRight").area.GetW(), Height - gfx_Rect.getSprite(nameBase+"TopLeft").area.GetH() - gfx_Rect.getSprite(nameBase+"BottomLeft").area.GetH())
	End Function





Type TBlockGraphical extends TBlockMoveable
	Field imageBaseName:string
	Field imageDraggedBaseName:string
	Field image:TGW_Sprite
	Field image_dragged:TGW_Sprite
    Global AdditionallyDragged:Int	= 0
End Type




Type TGameObject {_exposeToLua="selected"}
	Field id:Int		= 0 	{_exposeToLua}
	Global LastID:int	= 0

	Method New()
		'assign a new id
		Self.id = Self.LastID
		Self.LastID:+1
	End Method

	Method GetID:int() {_exposeToLua}
		return self.id
	End Method


	'overrideable method for cleanup actions
	Method Remove()
	End Method
End Type




Type TOwnedGameObject extends TGameObject {_exposeToLua="selected"}
	Field owner:int		= 0


	Method SetOwner:int(owner:int=0) {_exposeToLua}
		self.owner = owner
	End Method


	Method GetOwner:int() {_exposeToLua}
		return owner
	End Method
End Type




'a graphical representation of multiple object ingame
Type TGUIGameListItem extends TGUIListItem
	Field assetNameDefault:string = "gfx_movie0"
	Field assetNameDragged:string = "gfx_movie0"
	Field asset:TGW_Sprite = null
	Field assetDefault:TGW_Sprite = null
	Field assetDragged:TGW_Sprite = null


    Method Create:TGUIGameListItem(label:string="",x:float=0.0,y:float=0.0,width:int=120,height:int=20)
		'creates base, registers click-event,...
		Super.Create(label, x,y,width,height)

   		self.InitAssets()
   		self.SetAsset()

		return self
	End Method


	Method InitAssets(nameDefault:string="", nameDragged:string="")
		if nameDefault = "" then nameDefault = self.assetNameDefault
		if nameDragged = "" then nameDragged = self.assetNameDragged

		self.assetNameDefault = nameDefault
		self.assetNameDragged = nameDragged
		self.assetDefault = Assets.GetSprite(nameDefault)
		self.assetDragged = Assets.GetSprite(nameDragged)

		self.SetAsset(self.assetDefault)
	End Method


	Method SetAsset(sprite:TGW_Sprite=null)
		if not sprite then sprite = self.assetDefault

		'only resize if not done already
		if self.asset <> sprite
			self.asset = sprite
			self.Resize(sprite.area.GetW(), sprite.area.GetH())
		endif
	End Method


	'override default update-method
	Method Update:int()
		super.Update()

		if self.mouseover or self.isDragged()
			EventManager.triggerEvent(TEventSimple.Create("guiGameObject.OnMouseOver", TData.Create(), self))
		endif

		if self.mouseover then Game.cursorstate = 1
		if self.isDragged()
			self.SetAsset(self.assetDragged)
			Game.cursorstate = 2
		endif
	End Method


	Method Draw()
		asset.draw(self.GetScreenX(), self.GetScreenY())
		'hovered
		if self.mouseover
			local oldAlpha:float = GetAlpha()
			SetAlpha 0.20*oldAlpha
			SetBlend LightBlend
			asset.draw(self.GetScreenX(), self.GetScreenY())
			SetBlend AlphaBlend
			SetAlpha oldAlpha
		endif
	End Method
End Type




Type TBlockMoveable extends TOwnedGameObject
	Field rect:TRectangle			= TRectangle.Create(0,0,0,0)
	Field dragable:Int				= 1 {saveload = "normalExt"}
	Field dragged:Int				= 0 {saveload = "normalExt"}
	Field OrigPos:TPoint 			= TPoint.Create(0, 0) {saveload = "normalExtB"}
	Field StartPos:TPoint			= TPoint.Create(0, 0) {saveload = "normalExt"}
	Field StartPosBackup:TPoint		= TPoint.Create(0, 0)


	'switches coords and state of blocks
	Method SwitchBlock(otherObj:TBlockMoveable)
		Self.SwitchCoords(otherObj)
		Local old:Int	= Self.dragged
		Self.dragged	= otherObj.dragged
		otherObj.dragged= old
	End Method


	'switches current and startcoords of two blocks
	Method SwitchCoords(otherObj:TBlockMoveable)
		TPoint.SwitchPos(Self.rect.position, 	otherObj.rect.position)
		TPoint.SwitchPos(Self.StartPos,			otherObj.StartPos)
		TPoint.SwitchPos(Self.StartPosBackup,	otherObj.StartPosBackup)
	End Method


	'checks if x, y are within startPoint+dimension
	Method containsCoord:Byte(x:Int, y:Int)
		return TFunctions.IsIn( x,y, Self.StartPos.getX(), Self.StartPos.getY(), Self.rect.getW(), Self.rect.getH() )
	End Method


	Method SetCoords(x:Int=NULL, y:Int=NULL, startx:Int=NULL, starty:Int=NULL)
      If x<>NULL 		Then Self.rect.position.SetX(x)
      If y<>NULL		Then Self.rect.position.SetY(y)
      If startx<>NULL	Then Self.StartPos.setX(startx)
      If starty<>NULL	Then Self.StartPos.SetY(starty)
	End Method


	Method SetBasePos(pos:TPoint = null)
		if pos <> null
			self.rect.position.setPos(pos)
			self.StartPos.setPos(pos)
		endif
	End Method


	Method IsAtStartPos:Int()
		return self.rect.position.isSame(self.StartPos, true)
	End Method


	Function SortDragged:int(o1:object, o2:object)
		Local s1:TBlockMoveable = TBlockMoveable(o1)
		Local s2:TBlockMoveable = TBlockMoveable(o2)
		If Not s2 Then Return 1                  ' Objekt nicht gefunden, an das Ende der Liste setzen
		Return (s1.dragged * 100)-(s2.dragged * 100)
	End Function
End Type




Type TFader
	Field fadeCount:Double		= 0
	Field fadeCountOld:Double	= 0 'for tweening
	Field fadeout:Int 		= False
	Field fadeenabled:Int	= False
	Field fadeStarted:int	= FALSE

	Method Start()
		self.fadeStarted = TRUE
		Self.fadecount = 1
		Self.fadeout = False
	End Method

	Method Stop()
		self.fadeStarted = FALSE
	End Method

	Method Enable()
		Self.fadeenabled = True
	End Method

	Method Disable()
		Self.fadeenabled = FALSE
	End Method

	Method StartFadeout()
		self.Start()
		Self.fadecount = 20
		Self.fadeout = True
	End Method

	Method Update:int(deltaTime:float=1.0)
		if not self.fadeStarted then return FALSE

		fadeCountOld = fadeCount
		If Self.fadecount > 20
			Self.fadecount = 20
		ElseIf Self.fadecount >= 0 And Self.fadeenabled
			if self.fadeOut
				Self.fadecount:-1.3
			else
				Self.fadecount:+1.3
			endif
		ElseIf Self.fadecount < 0
			Self.fadecount = -1
			Self.fadeenabled = False
		EndIf
	End Method

	Method Draw()
		If Self.fadecount >= 0 And Self.fadeenabled
			local tweenFadeCount:double = GetTweenResult(fadeCount, fadeCountOld, true)

			SetColor 0, 0, 0;SetAlpha float(tweenFadeCount) / 20.0
			DrawRect(20,10,380-(20-tweenFadeCount)*19,190-(20-tweenFadeCount)*19)
			DrawRect(400+(20-tweenFadeCount)*19,10,380-(20-tweenFadeCount)*19,190-(20-tweenFadeCount)*19)
			DrawRect(20,195+(20-tweenFadeCount)*19,380-(20-tweenFadeCount)*19,190-(20-tweenFadeCount)*19)
			DrawRect(400+(20-tweenFadeCount)*19,195+(20-tweenFadeCount)*19,380-(20-tweenFadeCount)*19,190-(20-tweenFadeCount)*19)
			SetColor 255,255,255;SetAlpha 1.0
		EndIf
	End Method
End Type




Type TError
	Field title:String
	Field message:String
	Field id:Int
	Field link:TLink
	Field pos:TPoint

	Global List:TList = CreateList()
	Global LastID:Int=0
	Global sprite:TGW_Sprite


	Function Create:TError(title:String, message:String)
		Local obj:TError =  New TError
		obj.title	= title
		obj.message	= message
		obj.id		= LastID
		LastID :+1
		if obj.sprite = null then obj.sprite = Assets.getSprite("gfx_errorbox")
		obj.pos		= TPoint.Create(400-obj.sprite.area.GetW()/2 +6, 200-obj.sprite.area.GetH()/2 +6)
		obj.link	= List.AddLast(obj)
		Return obj
	End Function

	Function hasActiveError:int()
		return (List.count() > 0)
	End Function


	Function CreateNotEnoughMoneyError()
		TError.Create(getLocale("ERROR_NOT_ENOUGH_MONEY"),getLocale("ERROR_NOT_ENOUGH_MONEY_TEXT"))
	End Function


	Function DrawErrors()
		Local error:TError = TError(List.Last())
		If error Then error.draw()
	End Function


	Function UpdateErrors()
		Local error:TError = TError(List.Last())
		If error Then error.Update()
	End Function


	Method Update()
		MouseManager.resetKey(2) 'no right clicking allowed as long as "error notice is active"
		If Mousemanager.IsClicked(1)
			If TFunctions.MouseIn(pos.x,pos.y, sprite.area.GetW(), sprite.area.GetH())
				link.Remove()
				MouseManager.resetKey(1) 'clicked to remove error
			EndIf
		EndIf
	End Method


	Function DrawNewError(str:String="unknown error")
		TError(TError.List.Last()).message = str
		TError.DrawErrors()
		Flip 0
	End Function


	Method Draw()
		SetAlpha 0.5
		SetColor 0,0,0
		DrawRect(20,10,760, 373)
		SetAlpha 1.0
		Game.cursorstate = 0
		SetColor 255,255,255
		sprite.Draw(pos.x,pos.y)
		Assets.getFont("Default", 15, BOLDFONT).drawBlock(title, pos.x + 12 + 6, pos.y + 15, sprite.area.GetW() - 60, 40, null, TColor.Create(150, 50, 50))
		Assets.getFont("Default", 12).drawBlock(message, pos.x+12+6,pos.y+50,sprite.area.GetW()-40, sprite.area.GetH()-60, null, TColor.Create(50, 50, 50))
  End Method
End Type




'Answer - objects for dialogues
Type TDialogueAnswer
	Field _text:String = ""
	Field _leadsTo:Int = 0
	Field _onUseEvent:TEventBase
	field _highlighted:int = 0


	Function Create:TDialogueAnswer (text:String, leadsTo:Int = 0, onUseEvent:TEventBase= Null)
		Local obj:TDialogueAnswer = New TDialogueAnswer
		obj._text		= Text
		obj._leadsTo	= leadsTo
		obj._onUseEvent	= onUseEvent
		Return obj
	End Function


	Method Update:Int(x:Float, y:Float, w:Float, h:Float, clicked:Int = 0)
		self._highlighted = FALSE
		If TFunctions.MouseIn( x, y-2, w, Assets.getFont("Default", 12).getBlockHeight(Self._text, w, h))
			self._highlighted = TRUE
			If clicked
				'emit the event if there is one
				if _onUseEvent then EventManager.triggerEvent(_onUseEvent)
				Return _leadsTo
			EndIf
		EndIf
		Return - 1
	End Method


	Method Draw(x:Float, y:Float, w:Float, h:Float)
		if self._highlighted
			SetColor 200,100,100
			DrawOval(x, y +3, 6, 6)
			Assets.getFont("Default", 12, BoldFont).drawBlock(Self._text, x+9, y-1, w-10, h, null, TColor.Create(0, 0, 0))
		else
			SetColor 0,0,0
			DrawOval(x, y +3, 6, 6)
			Assets.getFont("Default", 12).drawBlock(Self._text, x+10, y, w-10, h, null, TColor.Create(100, 100, 100))
		endif
	End Method
End Type




'Texts, maintext + list of answers to this said thing ;D
Type TDialogueTexts
	Field _text:String = ""
	Field _answers:TList = CreateList() 'of TDialogueAnswer
	Field _goTo:Int = -1


	Function Create:TDialogueTexts(text:String)
		Local obj:TDialogueTexts = New TDialogueTexts
		obj._text = Text
		Return obj
	End Function


	Method AddAnswer(answer:TDialogueAnswer)
		Self._answers.AddLast(answer)
	End Method


	Method Update:Int(x:Float, y:Float, w:Float, h:Float, clicked:Int = 0)
		Local ydisplace:Float = Assets.getFont("Default", 14).drawBlock(Self._text, x, y, w, h).getY()
		ydisplace:+15 'displace answers a bit
		_goTo = -1
		For Local answer:TDialogueAnswer = EachIn(Self._answers)
			Local returnValue:Int = answer.Update(x + 9, y + ydisplace, w - 9, h, clicked)
			If returnValue <> - 1 Then _goTo = returnValue
			ydisplace:+Assets.getFont("Default", 14).getHeight(answer._text) + 2
		Next
		Return _goTo
	End Method


	Method Draw(x:Float, y:Float, w:Float, h:Float)
		Local ydisplace:Float = Assets.getFont("Default", 14).drawBlock(Self._text, x, y, w, h).getY()
		ydisplace:+15 'displace answers a bit

		local lineHeight:int = 2 + Assets.getFont("Default", 14).getHeight("QqT") 'high chars, low chars

		For Local answer:TDialogueAnswer = EachIn(Self._answers)
			answer.Draw(x, y + ydisplace, w, h)
			ydisplace:+ lineHeight
		Next
	End Method
End Type




Type TDialogue
	Field _texts:TList = CreateList() 'of TDialogueTexts
	Field _currentText:Int = 0
	Field _rect:TRectangle = TRectangle.Create(0,0,0,0)


	Function Create:TDialogue(x:Float, y:Float, w:Float, h:Float)
		Local obj:TDialogue = New TDialogue
		obj._rect.position.SetXY(x,y)
		obj._rect.dimension.SetXY(w,h)
		Return obj
	End Function


	Method AddText(Text:TDialogueTexts)
		Self._texts.AddLast(Text)
	End Method


	Method Update:Int(isMouseHit:Int = 0)
		Local clicked:Int = MouseManager.isHit(1) + MouseManager.IsDown(1)
		If clicked >= 1 Then clicked = 1;MouseManager.resetKey(1)
		Local nextText:Int = _currentText
		If Self._texts.Count() > 0

			Local returnValue:Int = TDialogueTexts(Self._texts.ValueAtIndex(Self._currentText)).Update(self._rect.getX() + 10, self._rect.getY() + 10, self._rect.getW() - 60, self._rect.getH(), clicked)
			If returnValue <> - 1 Then nextText = returnValue
		EndIf
		_currentText = nextText
		If _currentText = -2 Then _currentText = 0;Return 0
		Return 1
	End Method


	Method Draw()
		SetColor 255, 255, 255
	    DrawDialog("default", _rect.getX(), _rect.getY(), _rect.getW(), _rect.getH(), "StartLeftDown", 0, "", Assets.getFont("Default", 14))
		SetColor 0, 0, 0
		If Self._texts.Count() > 0 Then TDialogueTexts(Self._texts.ValueAtIndex(Self._currentText)).Draw(self._rect.getX() + 10, self._rect.getY() + 10, self._rect.getW() - 60, self._rect.getH())
		SetColor 255, 255, 255
	End Method
End Type


'extend tooltip to overwrite draw method
Type TTooltipAudience extends TTooltip
	Field audienceResult:TAudienceResult
	Field showDetails:int = FALSE
	Field lineHeight:int = 0
	Field lineIconHeight:int = 0

	Function Create:TTooltipAudience(title:String = "", text:String = "unknown", x:Int=0, y:Int=0, w:Int=-1, h:Int=-1, lifetime:Int=300)
		Local obj:TTooltipAudience = New TTooltipAudience
		obj.Initialize(title, text, x, y, w, h, lifetime)

		Return obj
	End Function


	'override to add lineheight
	Method Initialize:int(title:string="", content:string="unknown", x:int=0, y:int=0, w:int=-1, h:int=-1, lifetime:int=300)
		Super.Initialize(title, content, x, y, w, h, lifetime)
		self.lineHeight = self.useFont.GetHeight("Qg") 'Qg - big + underline char
		'text line with icon
		self.lineIconHeight = Max(lineHeight, Assets.getSprite("gfx_targetGroup1").area.GetH())
	End Method


	Method SetAudienceResult(audienceResult:TAudienceResult)
		self.audienceResult = audienceResult
	End Method


	Method GetContentWidth:int()
		if audienceResult
			return self.useFont.GetWidth( GetLocale("MAX_AUDIENCE_RATING") + ": " + TFunctions.convertValue(audienceResult.PotentialMaxAudience.GetSum(),0) + " (" + TFunctions.shortenFloat(100.0 * audienceResult.PotentialMaxAudienceQuote.Average, 2) + "%)" )
		else
			return self.Usefont.GetWidth( GetLocale("MAX_AUDIENCE_RATING") + ": 100 (100%)")
		endif
	End Method


	'override default to add "ALT-Key"-Switcher
	Method Update:Int(deltaTime:float=1.0)
		if KeyManager.isDown(KEY_LALT) or KeyManager.isDown(KEY_RALT)
			if not showDetails then self.dirtyImage = TRUE
			showDetails = TRUE
		else
			if showDetails then self.dirtyImage = TRUE
			showDetails = FALSE
		endif

		Super.Update(deltaTime)
	End Method


	Method GetContentHeight:int()
		if showDetails then return 3*lineHeight + 9*lineIconHeight
		'default
		return 4*lineHeight
	End Method


	'override default
	Method DrawContent:int(x:int, y:int, w:int, h:int)
		'give text padding
		x :+ 5
		y :+ 7
		w :- 2*5
		h :- 2*7

		if not self.audienceResult
			Usefont.draw("Audience data missing", x, y)
			return FALSE
		endif


		local lineY:int = y
		local lineX:int = x
		local lineText:String = ""
		local lineIconHeight:int = Max(lineHeight, Assets.getSprite("gfx_targetGroup1").area.GetH())
		local lineIconX:int = lineX + Assets.getSprite("gfx_targetGroup1").area.GetW() + 2
		local lineIconWidth:int = w - Assets.getSprite("gfx_targetGroup1").area.GetW()
		local lineIconDY:int = ceil(0.5 * (lineIconHeight - lineHeight))*2

		'draw overview text
		lineText = GetLocale("MAX_AUDIENCE_RATING") + ": " + TFunctions.convertValue(audienceResult.PotentialMaxAudience.GetSum(),0) + " (" + TFunctions.shortenFloat(100.0 * audienceResult.PotentialMaxAudienceQuote.Average, 2) + "%)"
		self.Usefont.draw(lineText, lineX, lineY, TColor.CreateGrey(90))
		lineY :+ 2 * self.Usefont.GetHeight(lineText)

		if not showDetails
			self.Usefont.draw(GetLocale("HINT_PRESSING_ALT_WILL_SHOW_DETAILS") , lineX, lineY, TColor.CreateGrey(150))
		else
			'add lines so we can have an easier "for loop"
			local lines:string[9]
			local percents:string[9]
			lines[0]	= getLocale("AD_GENRE_1") + ": " + TFunctions.convertValue(audienceResult.Audience.Children, 0)
			percents[0]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.Children * 100,2)
			lines[1]	= getLocale("AD_GENRE_2") + ": " + TFunctions.convertValue(audienceResult.Audience.Teenagers, 0)
			percents[1]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.Teenagers * 100,2)
			lines[2]	= getLocale("AD_GENRE_3") + ": " + TFunctions.convertValue(audienceResult.Audience.HouseWifes, 0)
			percents[2]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.HouseWifes * 100,2)
			lines[3]	= getLocale("AD_GENRE_4") + ": " + TFunctions.convertValue(audienceResult.Audience.Employees, 0)
			percents[3]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.Employees * 100,2)
			lines[4]	= getLocale("AD_GENRE_5") + ": " + TFunctions.convertValue(audienceResult.Audience.Unemployed, 0)
			percents[4]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.Unemployed * 100,2)
			lines[5]	= getLocale("AD_GENRE_6") + ": " + TFunctions.convertValue(audienceResult.Audience.Manager, 0)
			percents[5]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.Manager * 100,2)
			lines[6]	= getLocale("AD_GENRE_7") + ": " + TFunctions.convertValue(audienceResult.Audience.Pensioners, 0)
			percents[6]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.Pensioners * 100,2)
			lines[7]	= getLocale("AD_GENRE_8") + ": " + TFunctions.convertValue(audienceResult.Audience.Women, 0)
			percents[7]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.Women * 100,2)
			lines[8]	= getLocale("AD_GENRE_9") + ": " + TFunctions.convertValue(audienceResult.Audience.Men, 0)
			percents[8]	= TFunctions.shortenFloat(audienceResult.AudienceQuote.Men * 100,2)

			local colorLight:TColor = TColor.CreateGrey(240)
			local colorDark:TColor = TColor.CreateGrey(230)
			local colorTextLight:TColor = colorLight.copy().AdjustFactor(-110)
			local colorTextDark:TColor = colorDark.copy().AdjustFactor(-140)

			for local i:int = 1 to lines.length
				'shade the rows
				if i mod 2 = 0 then colorLight.SetRGB() else colorDark.SetRGB()
				DrawRect(lineX, lineY, w, lineIconHeight)
				'draw icon
				SetColor 255,255,255
				Assets.getSprite("gfx_targetGroup"+i).draw(lineX, lineY)
				'draw text
				if i mod 2 = 0
					Usefont.drawBlock(lines[i-1], lineIconX, lineY + lineIconDY,  w, lineHeight, null, ColorTextLight)
					Usefont.drawBlock(percents[i-1]+"%", lineIconX, lineY + lineIconDY, lineIconWidth - 5, lineIconHeight, TPoint.Create(ALIGN_RIGHT), ColorTextLight)
				else
					Usefont.drawBlock(lines[i-1], lineIconX, lineY + lineIconDY,  w, lineHeight, null, ColorTextDark)
					Usefont.drawBlock(percents[i-1]+"%", lineIconX, lineY + lineIconDY, lineIconWidth - 5, lineIconHeight, TPoint.Create(ALIGN_RIGHT), ColorTextDark)
				endif
				lineY :+ lineIconHeight
			Next
		endif
	End Method
End Type



'Interface, border, TV-antenna, audience-picture and number, watch...
'updates tv-images shown and so on
Type TInterface
	Field gfx_bottomRTT:TImage
	Field CurrentProgramme:TGW_Sprite
	Field CurrentAudience:TImage
	Field CurrentProgrammeText:String
	Field CurrentProgrammeToolTip:TTooltip
	Field CurrentAudienceToolTip:TTooltipAudience
	Field MoneyToolTip:TTooltip
	Field BettyToolTip:TTooltip
	Field CurrentTimeToolTip:TTooltip
	Field noiseSprite:TGW_Sprite
	Field noiseAlpha:Float	= 0.95
	Field noiseDisplace:Trectangle = TRectangle.Create(0,0,0,0)
	Field ChangeNoiseTimer:float= 0.0
	Field ShowChannel:Byte 	= 1
	Field BottomImgDirty:Byte = 1
	Global InterfaceList:TList


	'creates and returns an interface
	Function Create:TInterface()
		Local Interface:TInterface = New TInterface
		Interface.CurrentProgramme			= Assets.getSprite("gfx_interface_tv_programme_none")
		Interface.CurrentProgrammeToolTip	= TTooltip.Create("", "", 40, 395)
		'Interface.CurrentAudienceToolTip	= TTooltip.Create("", "", 355, 415)
		Interface.CurrentAudienceToolTip	= TTooltipAudience.Create("", "", 500, 415)
		Interface.CurrentTimeToolTip		= TTooltip.Create("", "", 355, 495)
		Interface.MoneyToolTip				= TTooltip.Create("", "", 355, 365)
		Interface.BettyToolTip				= TTooltip.Create("", "", 355, 465)
		Interface.noiseSprite				= Assets.getSprite("gfx_interface_tv_noise")
		'set space "left" when subtracting the genre image
		'so we know how many pixels we can move that image to simulate animation
		Interface.noiseDisplace.Dimension.SetX(Max(0, Interface.noiseSprite.area.GetW() - Interface.CurrentProgramme.area.GetW()))
		Interface.noiseDisplace.Dimension.SetY(Max(0, Interface.noiseSprite.area.GetH() - Interface.CurrentProgramme.area.GetH()))
		If Not InterfaceList Then InterfaceList = CreateList()
		InterfaceList.AddLast(Interface)
		SortList InterfaceList
		Return Interface
	End Function


	Method Update(deltaTime:float=1.0)
		If ShowChannel <> 0
			If Game.getMinute() >= 55
				Local advertisement:TBroadcastMaterial = Game.Players[ShowChannel].ProgrammePlan.GetAdvertisement()
				Interface.CurrentProgramme = Assets.getSprite("gfx_interface_TVprogram_ads")
			    If advertisement
					'real ad
					if TAdvertisement(advertisement)
						CurrentProgrammeToolTip.TitleBGtype = 1
						CurrentProgrammeText 				= getLocale("ADVERTISMENT")+": "+advertisement.GetTitle()
					else
						CurrentProgrammeToolTip.TitleBGtype = 1
						CurrentProgrammeText 				= getLocale("TRAILER")+": "+advertisement.GetTitle()
					endif
				Else
					CurrentProgrammeToolTip.TitleBGtype	= 2
					CurrentProgrammeText				= getLocale("BROADCASTING_OUTAGE")
				EndIf
			Else
				Local obj:TBroadcastMaterial = Game.Players[ShowChannel].ProgrammePlan.GetProgramme()
				Interface.CurrentProgramme = Assets.getSprite("gfx_interface_tv_programme_none")
				If obj
					Interface.CurrentProgramme = Assets.getSprite("gfx_interface_tv_programme_none")
					CurrentProgrammeToolTip.TitleBGtype	= 0
					'real programme
					if TProgramme(obj)
						local programme:TProgramme = TProgramme(obj)
						Interface.CurrentProgramme = Assets.getSprite("gfx_interface_TVprogram_" + programme.data.GetGenre(), "gfx_interface_tv_programme_none")
						if programme.isSeries()
							CurrentProgrammeText = programme.licence.parentLicence.GetTitle() + " ("+ (programme.GetEpisodeNumber()+1) + "/" + programme.GetEpisodeCount()+"): " + programme.GetTitle() + " (" + getLocale("BLOCK") + " " + Game.Players[ShowChannel].ProgrammePlan.GetProgrammeBlock() + "/" + programme.GetBlocks() + ")"
						else
							CurrentProgrammeText = programme.GetTitle() + " (" + getLocale("BLOCK") + " " + Game.Players[ShowChannel].ProgrammePlan.GetProgrammeBlock() + "/" + programme.GetBlocks() + ")"
						endif
					elseif TAdvertisement(obj)
						CurrentProgrammeText = GetLocale("INFOMERCIAL")+": "+obj.GetTitle() + " (" + getLocale("BLOCK") + " " + Game.Players[ShowChannel].ProgrammePlan.GetProgrammeBlock() + "/" + obj.GetBlocks() + ")"
					elseif TNews(obj)
						CurrentProgrammeText = GetLocale("SPECIAL_NEWS_BROADCAST")+": "+obj.GetTitle() + " (" + getLocale("BLOCK") + " " + Game.Players[ShowChannel].ProgrammePlan.GetProgrammeBlock() + "/" + obj.GetBlocks() + ")"
					endif
				Else
					CurrentProgrammeToolTip.TitleBGtype	= 2
					CurrentProgrammeText = getLocale("BROADCASTING_OUTAGE")
				EndIf
			EndIf
			If Game.getMinute() <= 5
				Interface.CurrentProgramme = Assets.getSprite("gfx_interface_TVprogram_news")
				CurrentProgrammeToolTip.TitleBGtype	= 3
				CurrentProgrammeText				= getLocale("NEWS")
			EndIf
		Else
			CurrentProgrammeToolTip.TitleBGtype		= 3
			CurrentProgrammeText 					= getLocale("TV_OFF")
		EndIf 'showchannel <>0

		If CurrentProgrammeToolTip.enabled Then CurrentProgrammeToolTip.Update(deltaTime)
		If CurrentAudienceToolTip.enabled Then CurrentAudienceToolTip.Update(deltaTime)
		If CurrentTimeToolTip.enabled Then CurrentTimeToolTip.Update(deltaTime)
		If BettyToolTip.enabled Then BettyToolTip.Update(deltaTime)
		If MoneyToolTip.enabled Then MoneyToolTip.Update(deltaTime)

		'channel selection (tvscreen on interface)
		If MOUSEMANAGER.IsHit(1)
			For Local i:Int = 0 To 4
				If TFunctions.MouseIn( 75 + i * 33, 171 + 383, 33, 41)
					ShowChannel = i
					BottomImgDirty = True
				endif
			Next
		EndIf

		'noise on interface-tvscreen
		ChangeNoiseTimer :+ deltaTime
		If ChangeNoiseTimer >= 0.20
			noiseDisplace.position.SetXY(Rand(0, noiseDisplace.dimension.GetX()),Rand(0, noiseDisplace.dimension.GetY()))
			ChangeNoiseTimer = 0.0
			NoiseAlpha = 0.45 - (Rand(0,20)*0.01)
		EndIf

		If TFunctions.MouseIn(20,385,280,200)
			CurrentProgrammeToolTip.title 		= CurrentProgrammeText
			If ShowChannel <> 0
				CurrentProgrammeToolTip.content	= GetLocale("AUDIENCE_RATING")+": "+Game.Players[ShowChannel].getFormattedAudience()+ " (MA: "+TFunctions.shortenFloat(Game.Players[ShowChannel].GetAudiencePercentage()*100,2)+"%)"

				'show additional information if channel is player's channel
				if ShowChannel = Game.playerID
					If Game.getMinute() >= 5 and Game.getMinute() < 55
						Local obj:TBroadcastMaterial = Game.Players[ShowChannel].ProgrammePlan.GetAdvertisement()
						if TAdvertisement(obj)
							CurrentProgrammeToolTip.content :+ "~n ~n"+getLocale("NEXT_ADBLOCK")+":~n" + obj.GetTitle()+" (Mindestz.: " + TFunctions.convertValue(TAdvertisement(obj).contract.getMinAudience())+")"
						elseif TProgramme(obj)
							CurrentProgrammeToolTip.content :+ "~n ~n"+getLocale("NEXT_ADBLOCK")+":~nTrailer: " + obj.GetTitle()
						else
							CurrentProgrammeToolTip.content :+ "~n ~n"+getLocale("NEXT_ADBLOCK")+": nicht gesetzt!"
						endif
					elseif Game.getMinute()>=55 OR Game.getMinute()<5
						Local obj:TBroadcastMaterial = Game.Players[ShowChannel].ProgrammePlan.GetProgramme()
						if TProgramme(obj)
							CurrentProgrammeToolTip.content :+ "~n ~n"+getLocale("NEXT_PROGRAMME")+":~n"
							if TProgramme(obj) and TProgramme(obj).isSeries()
								CurrentProgrammeTooltip.content :+ TProgramme(obj).licence.parentLicence.data.GetTitle() + ": " + obj.GetTitle() + " (" + getLocale("BLOCK") + " " + Game.Players[ShowChannel].ProgrammePlan.GetProgrammeBlock() + "/" + obj.GetBlocks() + ")"
							else
								CurrentProgrammeToolTip.content :+ obj.GetTitle() + " (" + getLocale("BLOCK")+" " + Game.Players[ShowChannel].ProgrammePlan.GetProgrammeBlock() + "/" + obj.GetBlocks() + ")"
							endif
						elseif TAdvertisement(obj)
							CurrentProgrammeToolTip.content :+ "~n ~n"+getLocale("NEXT_PROGRAMME")+":~nDauerwerbesendung: " + obj.GetTitle() + " (" + getLocale("BLOCK")+" " + Game.Players[ShowChannel].ProgrammePlan.GetProgrammeBlock() + "/" + obj.GetBlocks() + ")"
						else
							CurrentProgrammeToolTip.content :+ "~n ~n"+getLocale("NEXT_PROGRAMME")+": nicht gesetzt!"
						endif
					endif
				endif

			Else
				CurrentProgrammeToolTip.content = getLocale("TV_TURN_IT_ON")
			EndIf
			CurrentProgrammeToolTip.enabled 	= 1
			CurrentProgrammeToolTip.Hover()
			'force redraw
			CurrentTimeToolTip.dirtyImage = true
	    EndIf
		If TFunctions.MouseIn(355,468,130,30)
			'Print "DebugInfo: " + TAudienceResult.Curr().ToString()
			Local player:TPlayer = Game.Players[Game.playerID]
			Local audienceResult:TAudienceResult = player.audience

			'TODO Ronny: Das kannst du bestimmt schöner präsentieren. Es gibt ja noch die zielgruppen.png.
			CurrentAudienceToolTip.title 	= GetLocale("AUDIENCE_RATING")+": "+player.getFormattedAudience()+ " (MA: "+TFunctions.shortenFloat(player.GetAudiencePercentage() * 100,2)+"%)"
			CurrentAudienceToolTip.SetAudienceResult(audienceResult)
			CurrentAudienceToolTip.enabled 	= 1
			CurrentAudienceToolTip.Hover()
			'force redraw
			CurrentTimeToolTip.dirtyImage = true
		EndIf
		If TFunctions.MouseIn(355,533,130,45)
			CurrentTimeToolTip.title 	= getLocale("GAME_TIME")+": "
			CurrentTimeToolTip.content 	= Game.getFormattedTime()+" "+getLocale("DAY")+" "+Game.getDayOfYear()+"/"+Game.daysPerYear+" "+Game.getYear()
			CurrentTimeToolTip.enabled 	= 1
			CurrentTimeToolTip.Hover()
			'force redraw
			CurrentTimeToolTip.dirtyImage = true
		EndIf
		If TFunctions.MouseIn(355,415,130,30)
			MoneyToolTip.title 		= getLocale("MONEY")
			MoneyTooltip.content	= "|b|"+getLocale("MONEY")+":|/b| "+Game.GetPlayer().GetMoney() + getLocale("CURRENCY")
			Moneytooltip.content	:+ "~n"
			Moneytooltip.content	:+ "|b|"+getLocale("DEBT")+":|/b| |color=200,100,100|"+ Game.GetPlayer().GetCredit() + getLocale("CURRENCY")+"|/color|"
			MoneyToolTip.enabled 	= 1
			MoneyToolTip.Hover()
			'force redraw
			MoneyToolTip.dirtyImage = true
		EndIf
		If TFunctions.MouseIn(355,510,130,15)
			BettyToolTip.title	 	= getLocale("BETTY_FEELINGS")
			BettyToolTip.content 	= "0 %"
			BettyToolTip.enabled 	= 1
			BettyToolTip.Hover()
			'force redraw
			BettyToolTip.dirtyImage = true
		EndIf
	End Method


	'draws the interface
	Method Draw(tweenValue:float=1.0)
		Assets.getSprite("gfx_interface_top").Draw(0,0)
		Assets.getSprite("gfx_interface_leftright").DrawClipped(TPoint.Create(0, 20), TRectangle.Create(0, 0, 27, 363))
		SetBlend SOLIDBLEND
		Assets.getSprite("gfx_interface_leftright").DrawClipped(TPoint.Create(780, 20), TRectangle.Create(27, 0, 20, 363))

		If BottomImgDirty
			Local NoDX9moveY:Int = 383

			SetBlend MASKBLEND
			'draw bottom, aligned "bottom"
			Assets.getSprite("gfx_interface_bottom").Draw(0,App.settings.getHeight(),0, TPoint.Create(ALIGN_LEFT, ALIGN_BOTTOM))

			If ShowChannel <> 0 Then Assets.getSprite("gfx_interface_audience_bg").Draw(520, 419 - 383 + NoDX9moveY)


			Assets.getSprite("gfx_interface_antenna").Draw(111,329)


		    'channel choosen and something aired?
			If ShowChannel <> 0 AND Game.Players[ShowChannel].audience
				'If CurrentProgram = Null Then Print "ERROR: CurrentProgram is missing"
				if CurrentProgramme then CurrentProgramme.Draw(50, 400)

				Local audiencerate:Float = Game.Players[ShowChannel].audience.AudienceQuote.Average

				Local girl_on:Int 			= 0
				Local grandpa_on:Int		= 0
				Local teen_on:Int 			= 0
				If audiencerate > 0.4 And (Game.getHour() < 21 And Game.getHour() > 6) Then girl_on = True
				If audiencerate > 0.1 Then grandpa_on = True
		  		If audiencerate > 0.3 And (Game.getHour() < 2 Or Game.getHour() > 11) Then teen_on = True
				If teen_on And grandpa_on
					Assets.getSprite("gfx_interface_audience_teen").Draw(570, 419 - 383 + NoDX9moveY)    'teen
					Assets.getSprite("gfx_interface_audience_grandpa").Draw(650, 419 - 383 + NoDX9moveY)      'teen
				ElseIf grandpa_on And girl_on And Not teen_on
					Assets.getSprite("gfx_interface_audience_girl").Draw(570, 419 - 383 + NoDX9moveY)      'teen
					Assets.getSprite("gfx_interface_audience_grandpa").Draw(650, 419 - 383 + NoDX9moveY)       'teen
				Else
					If teen_on Then Assets.getSprite("gfx_interface_audience_teen").Draw(670, 419 - 383 + NoDX9moveY)
					If girl_on Then Assets.getSprite("gfx_interface_audience_girl").Draw(550, 419 - 383 + NoDX9moveY)
					If grandpa_on Then Assets.getSprite("gfx_interface_audience_grandpa").Draw(610, 419 - 383 + NoDX9moveY)
					If Not grandpa_on And Not girl_on And Not teen_on
						SetColor 50, 50, 50
						SetBlend MASKBLEND
						Assets.getSprite("gfx_interface_audience_bg").Draw(520, 419 - 383 + NoDX9moveY)
						SetColor 255, 255, 255
		    	    EndIf
				EndIf
			EndIf 'showchannel <>0
			SetBlend ALPHABLEND

			'draw noise of tv device
			If ShowChannel <> 0
				SetAlpha NoiseAlpha
				if noiseSprite then noiseSprite.DrawClipped(TPoint.Create(50, 400), TRectangle.Create(noiseDisplace.GetX(),noiseDisplace.GetY(), 220,170) )
				SetAlpha 1.0
			EndIf
			'draw overlay to hide corners of non-round images
			Assets.getSprite("gfx_interface_tv_overlay").Draw(40,400)

		    For Local i:Int = 0 To 4
				If i = ShowChannel
					Assets.getSprite("gfx_interface_channelbuttons_on"+i).Draw(75 + i * 33, 171 + NoDX9moveY)
				Else
					Assets.getSprite("gfx_interface_channelbuttons_off"+i).Draw(75 + i * 33, 171 + NoDX9moveY)
				EndIf
		    Next

			'draw the small electronic parts - "the inner tv"
	  		SetBlend MASKBLEND
	     	Assets.getSprite("gfx_interface_audience_overlay").Draw(520, 419 - 383 + NoDX9moveY)
			SetBlend ALPHABLEND
			Assets.getFont("Default", 13, BOLDFONT).drawBlock(Game.GetPlayer().getMoneyFormatted() + "  ", 377, 427 - 383 + NoDX9moveY, 103, 25, TPoint.Create(ALIGN_RIGHT), TColor.Create(200,230,200), 2)
			Assets.GetFont("Default", 13, BOLDFONT).drawBlock(Game.GetPlayer().getFormattedAudience() + "  ", 377, 469 - 383 + NoDX9moveY, 103, 25, TPoint.Create(ALIGN_RIGHT), TColor.Create(200,200,230), 2)
		 	Assets.GetFont("Default", 11, BOLDFONT).drawBlock((Game.daysPlayed+1) + ". Tag", 366, 555 - 383 + NoDX9moveY, 120, 25, TPoint.Create(ALIGN_CENTER), TColor.Create(180,180,180), 2)
		EndIf 'bottomimg is dirty



		SetAlpha 0.25
		Assets.getFont("Default", 13, BOLDFONT).drawBlock(Game.getFormattedTime() + " Uhr", 366, 542, 120, 25, TPoint.Create(ALIGN_CENTER), TColor.Create(180,180,180))
		SetAlpha 0.9
		Assets.getFont("Default", 13, BOLDFONT).drawBlock(Game.getFormattedTime()+ " Uhr", 365,541,120,25, TPoint.Create(ALIGN_CENTER), TColor.Create(40,40,40))
		SetAlpha 1.0
   		CurrentProgrammeToolTip.Draw()
	    CurrentAudienceToolTip.Draw()
   		CurrentTimeToolTip.Draw()
	    BettyToolTip.Draw()
   		MoneyToolTip.Draw()
	    GUIManager.Draw("InGame")

		TError.DrawErrors()
	End Method
End Type




'===== STATIONMAP COMPONENTS =====

'Stationmap
'provides the option to buy new stations
'functions are calculation of audiencesums and drawing of stations
Type TStation extends TGameObject {_exposeToLua="selected"}
	Field pos:TPoint
	Field reach:Int				= -1
	Field reachIncrease:Int		= -1		'increase of reach at when bought
	Field price:Int				= -1
	Field fixedPrice:int		= FALSE		'fixed prices are kept during refresh
	Field owner:Int				= 0
	Field paid:Int				= FALSE
	Field built:int				= 0			'time at which the
	Field radius:int			= 0
	Field federalState:string	= ""


	Function Create:TStation( pos:TPoint, price:Int=-1, radius:int, owner:Int)
		Local obj:TStation = New TStation
		obj.owner		= owner
		obj.pos			= pos
		obj.price		= price
		obj.radius		= radius
		obj.built		= Game.getTimeGone()

		obj.fixedPrice	= (price <> -1)
		obj.refreshData()
		'print "pos "+pos.getIntX()+","+pos.getIntY()+" preis:"+obj.getPrice()+" reach:"+obj.getReach()
		Return obj
	End Function


	Function Load:TStation(pnode:TxmlNode)
		print "implement Load:TStation"
		return null
	End Function


	Method Save()
		print "implement Save:TStation"
	End Method


	'refresh the station data
	Method refreshData() {_exposeToLua}
		getReach(true)
		getReachIncrease(true)
		getPrice( not fixedPrice )
	End Method


	'returns the age in days
	Method getAge:int()
		return Game.GetDay() - Game.GetDay(self.built)
	End Method


	'get the reach of that station
	Method getReach:int(refresh:int=FALSE) {_exposeToLua}
		if reach >= 0 and not refresh then return reach
		reach = TStationMap.CalculateStationReach(pos.x, pos.y)

		return reach
	End Method


	Method getReachIncrease:int(refresh:int=FALSE) {_exposeToLua}
		if reachIncrease >= 0 and not refresh then return reachIncrease

		if not Game.isPlayer(owner)
			print "getReachIncrease: owner is not a player."
			return 0
		endif

		reachIncrease = Game.Players[owner].StationMap.CalculateAudienceIncrease(pos.x, pos.y)

		return reachIncrease
	End Method


	'if nobody needs that info , remove the method
	Method GetHoveredMapSection:TStationMapSection()
		return TStationMapSection.get(self.pos.x, self.pos.y)
	End Method


	Method getFederalState:string(refresh:int=FALSE) {_exposeToLua}
		if federalState <> "" and not refresh then return federalState

		local hoveredSection:TStationMapSection = TStationMapSection.get(self.pos.x, self.pos.y)
		if hoveredSection then federalState = hoveredSection.name

		return federalState
	End Method


	Method getSellPrice:int(refresh:int=FALSE) {_exposeToLua}
		'price is multiplied by an age factor of 0.75-0.95
		local factor:float = Max(0.75, 0.95 - float(getAge())/1.0)
		if price >= 0 and not refresh then return int(price * factor / 10000) * 10000

		return int( getPrice(refresh) * factor / 10000) * 10000
	End Method


	Method getPrice:int(refresh:int=FALSE) {_exposeToLua}
		if price >= 0 and not refresh then return price
		price = Max( 25000, Int(Ceil(getReach() / 10000)) * 25000 )

		return price
	End Method


	Method Sell:int()
		if not Game.IsPlayer(owner) then return FALSE

		If Game.GetPlayer(owner).GetFinance().SellStation( getSellPrice() )
			owner = 0
			return TRUE
		EndIf
		return FALSE
	End Method


	Method Buy:int( playerID:int=-1 )
		If playerID = -1 Then playerID = Game.playerID
		if not Game.IsPlayer(playerID) then return FALSE

		if paid then return TRUE

		If Game.GetPlayer(playerID).GetFinance().PayStation( getPrice() )
			owner = playerID
			paid = TRUE
			return TRUE
		EndIf
		return FALSE
	End Method


	Method DrawInfoTooltip()
		local textH:int =  Assets.fonts.baseFontBold.getHeight( "Tg" )
		local tooltipW:int = 180
		local tooltipH:int = textH * 4 + 10 + 5
		local tooltipX:int = pos.x +20 - tooltipW/2
		local tooltipY:int = pos.y - radius - tooltipH

		'move below station if at screen top
		if tooltipY < 20 then tooltipY = pos.y+radius + 10 +10
		tooltipX = Max(20,tooltipX)
		tooltipX = Min(585-tooltipW,tooltipX)

		SetAlpha 0.5
		SetColor 0,0,0
		DrawRect(tooltipX,tooltipY,tooltipW,tooltipH)
		SetColor 255,255,255
		SetAlpha 1.0

		local textY:int = tooltipY+5
		local textX:int = tooltipX+5
		local textW:int = tooltipW-10
		local colorWhite:TColor = TColor.Create(255,255,255)
		Assets.fonts.baseFontBold.drawStyled( getLocale("MAP_COUNTRY_"+getFederalState()), textX, textY, TColor.Create(255,255,0), 2)
		textY:+ textH + 5

		Assets.fonts.baseFont.draw(GetLocale("RANGE")+": ", textX, textY)
		Assets.fonts.baseFontBold.drawBlock(TFunctions.convertValue(getReach(), 2), textX, textY, textW, 20, TPoint.Create(ALIGN_RIGHT), colorWhite)
		textY:+ textH

		Assets.fonts.baseFont.draw(GetLocale("INCREASE")+": ", textX, textY)
		Assets.fonts.baseFontBold.drawBlock(TFunctions.convertValue(getReachIncrease(), 2), textX, textY, textW, 20, TPoint.Create(ALIGN_RIGHT), colorWhite)
		textY:+ textH

		Assets.fonts.baseFont.draw(GetLocale("PRICE")+": ", textX, textY)
		Assets.fonts.baseFontBold.drawBlock(TFunctions.convertValue(getPrice(), 2), textX, textY, textW, 20, TPoint.Create(ALIGN_RIGHT), colorWhite)

	End Method


	Method Draw(selected:int=FALSE)
		Local sprite:TGW_Sprite = Null
		local oldAlpha:float = getAlpha()

		if selected
			'white border around the colorized circle
			SetAlpha 0.25 * oldAlpha
			DrawOval(pos.x - radius -2, pos.y - radius -2 ,radius*2+4,radius*2+4)

			SetAlpha Min(0.9, Max(0,sin(Millisecs()/3)) + 0.5 ) * oldAlpha
		else
			SetAlpha 0.4 * oldAlpha
		endif

		Select owner
			Case 1,2,3,4	Game.Players[owner].color.SetRGB()
							sprite = Assets.getSprite("stationmap_antenna"+owner)
			Default			SetColor 255, 255, 255
							sprite = Assets.getSprite("stationmap_antenna0")
		End Select
		DrawOval(pos.x - radius, pos.y - radius, 2 * radius, 2 * radius)

		SetColor 255,255,255
		SetAlpha OldAlpha
		sprite.Draw(pos.x, pos.y + radius - sprite.area.GetH() - 2, -1, TPoint.Create(ALIGN_CENTER, ALIGN_TOP))
	End Method
End Type




Type TStationMapSection
	field rect:TRectangle
	field sprite:TGW_Sprite
	field name:string
	global sections:TList = CreateList()


	Method Create:TStationMapSection(pos:TPoint, name:string, sprite:TGW_Sprite)
		self.rect = TRectangle.Create(pos.x,pos.y, sprite.area.GetW(), sprite.area.GetH())
		self.name = name
		self.sprite = sprite
		return self
	End Method


	Function get:TStationMapSection(x:int,y:int)
		For local section:TStationMapSection = eachin sections
			if section.rect.containsXY(x,y)
				if section.sprite.PixelIsOpaque(x-section.rect.getX(), y-section.rect.getY()) > 0
					return section
				endif
			endif
		Next
		return Null
	End Function


	Method Add()
		self.sections.addLast(self)
	End Method
end Type




EventManager.registerListener( "resources.onLoad.STATIONMAP",	TEventListenerRunFunction.Create(TStationMap.onLoadStationMapConfiguration)  )
Type TStationMap {_exposeToLua="selected"}
	Field showStations:Int[4]						'select whose players stations we want to see
	Field reach:int					= 0				'maximum audience possible
	Field mouseoverStation:TStation	= null			'for showing details for current mouse position
	Field selectedStation:TStation	= null			'for sale or buy
	Field userAction:int			= 0				'state
	Field parent:TPlayer			= null
	Field stations:TList			= CreateList()	'all stations of the map owner

	Global shareMap:TMap			= Null			'map containing bitmask-coded information for "used" pixels
	Global shareCache:TMap			= Null
	Global stationRadius:Int		= 15		{saveload = "normal"}
	Global population:Int			= 0			{saveload = "normal"}
	Global populationmap:Int[,]
	Global populationMapSize:TPoint	= TPoint.Create()
	Global List:TList				= CreateList()	'all stationmaps (currently: only one)
	Global fireEvents:int			= TRUE			'FALSE to avoid recursive handling (network)
	Global initDone:int				= FALSE			'map init already done?
	'difference between screen0,0 and pixmap
	'->needed movement to have population-pixmap over country
	Global populationMapOffset:TPoint	= TPoint.Create(20, 10)

	Function InitMapData:int()
		if initDone then return TRUE

		local start:int = Millisecs()
		local i:int, j:int

		'calculate population
		local srcPix:TPixmap = Assets.getPixmap("stationmap_populationDensity")
		'move pixmap so it overlays the rest
		local pix:TPixmap = CreatePixmap(srcPix.width + populationMapOffset.x, srcPix.height + populationMapOffset.y, srcPix.format)
		pix.paste(srcPix, populationMapOffset.x, populationMapOffset.y)

		local map:int[pix.width + 20, pix.height + 20]
		populationMap = map
		populationMapSize.SetXY(pix.width, pix.height)

		'read all inhabitants of the map
		For i = 0 To pix.width-1
			For j = 0 To pix.height-1
				if ARGB_ALPHA(pix.ReadPixel(i, j)) = 0 then continue
				populationmap[i, j] = getPopulationForBrightness( ARGB_RED(pix.ReadPixel(i, j)) )
				population:+ populationmap[i, j]
			Next
		Next
		TDevHelper.log("TStationMap.InitMapData", "calculated a population of:" + population + " in "+(Millisecs()-start)+"ms", LOG_LOADING)

		EventManager.triggerEvent( TEventSimple.Create("Loader.onLoadElement", TData.Create().AddString("text", "Stationmap").AddNumber("itemNumber", 1).AddNumber("maxItemNumber", 1) ) )

		'to refresh share map on buy/sell of stations
		EventManager.registerListenerFunction( "stationmap.addStation",	onChangeStations )
		EventManager.registerListenerFunction( "stationmap.removeStation",	onChangeStations )

		initDone = true
		return TRUE
	End Function


	Function Create:TStationMap(player:TPlayer)
		Local obj:TStationMap = New TStationMap
		obj.parent = player

		if not InitDone then obj.InitMapData()

		list.AddLast(obj)
		Return obj
	End Function


	'return the stationmap of other players
	'do not expose to Lua... else they get access to buy/sell
	Function getStationMap:TStationMap(playerID:int=-1)
		If playerID <= 0 Then playerID = Game.playerID

		if list.count() < playerID then return Null

		return TStationMap(self.list.ValueAtIndex(playerID-1))
	End Function


	'someone sold or bought a station, call shareMap-Generator
	Function onChangeStations:int( triggerEvent:TEventBase )
		GenerateShareMap()
	End Function


	'external xml configuration of map and states
	Function onLoadStationMapConfiguration:int( triggerEvent:TEventBase)
		local childNode:TxmlNode = null
		local xmlLoader:TXmlLoader = null
		if not TResourceLoaders.assignBasics( triggerEvent, childNode, xmlLoader ) then return 0

		'find and load density map data (and overwrite asset name)
		local densityNode:TXmlNode = xmlLoader.xml.FindChild(childNode, "densitymap")
		if densityNode then xmlLoader.LoadPixmapResource(densityNode, "stationmap_populationDensity")

		'find and load states data
		local statesNode:TXmlNode = xmlLoader.xml.FindChild(childNode, "states")
		if statesNode = null then Throw("StationMap: states definition missing in XML files.")

		For Local child:TxmlNode = EachIn statesNode.getChildren()
			local name:string	= xmlLoader.xml.FindValue(child, "name", "")
			local sprite:string	= xmlLoader.xml.FindValue(child, "sprite", "")
			local pos:TPoint	= TPoint.Create( xmlLoader.xml.FindValueInt(child, "x", 0), xmlLoader.xml.FindValueInt(child, "y", 0) )
			'add state section if data is ok
			if name<>"" and sprite<>"" then new TStationMapSection.Create(pos,name, Assets.getSprite(sprite)).add()
		Next
	End Function


	'returns the maximum reach of the stations on that map
	Method getReach:int() {_exposeToLua}
		return self.reach
	End Method


	Method getCoverage:float() {_exposeToLua}
		return float(self.reach) / float(self.population)
	End Method


	'returns a station-object wich can be used for further
	'information getting (share etc)
	Method getTemporaryStation:TStation(x:int,y:int)  {_exposeToLua}
		return TStation.Create(TPoint.Create(x,y),-1, self.stationRadius, self.parent.playerID)
	End Method


	'return a station at the given coordinates (eg. used by network)
	Method getStation:TStation(x:int=0,y:int=0) {_exposeToLua}
		local pos:TPoint = TPoint.Create(x, y)
		For local station:TStation = eachin self.stations
			if not station.pos.isSame(pos) then continue
			return station
		Next
		return Null
	End Method


	'returns a station of a player at a given position in the list
	Method getStationFromList:TStation(playerID:int=-1, position:int=0) {_exposeToLua}
		local stationMap:TStationMap = self.getStationMap(playerID)
		if not stationMap then return Null
		'out of bounds?
		If position<0 OR position >= stationMap.stations.count() Then Return NULL

		return TStation( stationMap.stations.ValueAtIndex(position) )
	End Method


	'returns the amount of stations a player has
	Method getStationCount:Int(playerID:int=-1) {_exposeToLua}
		if playerID = self.parent.playerID then Return stations.count()

		local stationMap:TStationMap = self.getStationMap(playerID)
		if not stationMap then return Null

		return stationMap.getStationCount(playerID)
	End Method


	'buy a new station at the given coordinates
	'only possible when in office+subrooms
	Method BuyStation:int(x:int,y:int) {_exposeToLua}
		if not self.parent.isInRoom("office", True) then return FALSE

		return self.AddStation( getTemporaryStation( x, y ), TRUE )
	End Method


	'sell a station at the given position in the list
	'only possible when in office+subrooms
	Method SellStation:int(position:int) {_exposeToLua}
		if not self.parent.isInRoom("office", True) then return FALSE

		local station:TStation = self.getStationFromList(position)
		if station then return self.RemoveStation(station, true)
	End Method


	Method AddStation:int(station:TStation, buy:int=FALSE)
		if not station then return FALSE

		'try to buy it (does nothing if already done)
		if buy and not station.Buy(parent.playerID) then return FALSE
		'set to paid in all cases
		station.paid = true

		stations.AddLast(station)

		'recalculate audience of channel
		RecalculateAudienceSum()

		TDevHelper.log("TStationMap.AddStation", "Player"+parent.playerID+" buys broadcasting station for " + station.price + " Euro (increases reach by " + station.reach + ")", LOG_DEBUG)

		'emit an event so eg. network can recognize the change
		if fireEvents then EventManager.registerEvent( TEventSimple.Create( "stationmap.addStation", TData.Create().add("station", station), self ) )

		return TRUE
	End Method


	Method RemoveStation:int(station:TStation, sell:int=FALSE)
		if not station then return FALSE

		'check if we try to sell our last station...
		if self.stations.count() = 1
			'if we are the player in front of the screen
			'inform about the situation
			if parent.playerID = Game.playerID
				TError.Create( getLocale("ERROR_NOT_POSSIBLE"), getLocale("ERROR_NOT_ABLE_TO_SELL_LAST_STATION") )
			endif
			return FALSE
		endif

		if sell and not station.sell() then return FALSE

		stations.Remove(station)

		if sell
			TDevHelper.log("TStationMap.AddStation", "Player"+parent.playerID+" sells broadcasting station for " + station.getSellPrice() + "Euro (had a reach of " + station.reach + ")", LOG_DEBUG)
		else
			TDevHelper.log("TStationMap.AddStation", "Player"+parent.playerID+" trashes broadcasting station for 0 Euro (had a reach of " + station.reach + ")", LOG_DEBUG)
		endif

		'recalculate audience of channel
		RecalculateAudienceSum()

		'when station is sold, audience will decrease,
		'while a buy will not increase the current audience but the next block
		'parent.ComputeAudience( TRUE )
		print "TODO@Manuel: recompute Audience when station is sold"

		'emit an event so eg. network can recognize the change
		if fireEvents then EventManager.registerEvent( TEventSimple.Create( "stationmap.removeStation", TData.Create().add("station", station), self ) )

		return TRUE
    End Method


	Method CalculateStationCosts:Int(owner:Int=0)
		Local costs:Int = 0
		For Local Station:TStation = EachIn stations
			If station.owner = owner Then costs:+1000 * Ceil(station.price / 50000) ' price / 50 = cost
		Next
		Return costs
	End Method

	Method Update()
	End Method


	Method DrawStations()
		For Local _Station:TStation = EachIn stations
			if _station = selectedStation then continue
			_Station.Draw()
		Next
	End Method


	Method Draw()
		SetColor 255,255,255

		'zero based
		For local i:int = 0 to Game.playerCount-1
			If not Self.showStations[i] then continue
			GetStationMap(i).DrawStations()
		Next
	End Method


	'summary: returns calculated distance between 2 points
	Function calculateDistance:Double(x1:Int, x2:Int)
		Return Sqr((x1*x1) + (x2*x2))
	End Function


	Function getMaskIndex:int(number:int)
		Local t:int = 1
		for local i:int = 1 to number-1
			t:*2
		Next
		Return t
	End Function


	Function getPopulationForBrightness:int(value:int)
		value = Max(5, 255-value)
		value = (value*value)/255 '2 times so low values are getting much lower
'		value = (value*value)/255
		value:* 0.649
'		If value < 50 Then value :* 1.5

		If value > 110 Then value :* 2.0
		If value > 140 Then value :* 1.9
		If value > 180 Then value :* 1.3
		If value > 220 Then value :* 1.1	'population in big cities
		return 26.0 * value					'population in general
	End Function


	Function GetShareMap:TMap()
		if not shareMap then GenerateShareMap()
		return shareMap
	End Function


	'returns the shared amount of audience between players
	Function GetShareAudience:int(playerIDs:int[], withoutPlayerIDs:int[]=null)
		return GetShare(playerIDs, withoutPlayerIDs).x
	End Function


	Function GetSharePercentage:float(playerIDs:int[], withoutPlayerIDs:int[]=null)
		return GetShare(playerIDs, withoutPlayerIDs).z
	End Function


	'returns a share between players, encoded in a tpoint containing:
	'x=sharedAudience,y=totalAudience,z=percentageOfSharedAudience
	Function GetShare:TPoint(playerIDs:Int[], withoutPlayerIDs:Int[]=Null)
		If playerIDs.length <1 Then Return TPoint.Create(0,0,0.0)
		if not withoutPlayerIDs then withoutPlayerIDs = new Int[0]
		Local cacheKey:String = ""
		for local i:int = 0 to playerIDs.length-1
			cacheKey:+ "_"+playerIDs[i]
		Next
		cacheKey:+"_without_"
		for local i:int = 0 to withoutPlayerIDs.length-1
			cacheKey:+ "_"+withoutPlayerIDs[i]
		Next

		'if already cached, save time...
		if shareCache and shareCache.contains(cacheKey) then return TPoint(shareMap.ValueForKey(cacheKey))

		local map:TMap				= GetShareMap()
		local result:TPoint			= TPoint.Create(0,0,0.0)
		local share:int				= 0
		local total:int				= 0
		local playerFlags:int[]
		local allFlag:int			= 0
		local withoutPlayerFlags:int[]
		local withoutFlag:int		= 0
		playerFlags					= playerFlags[.. playerIDs.length]
		withoutPlayerFlags			= withoutPlayerFlags[.. withoutPlayerIDs.length]

		for local i:int = 0 to playerIDs.length-1
			'player 1=1, 2=2, 3=4, 4=8 ...
			playerFlags[i]	= getMaskIndex( playerIDs[i] )
			allFlag :| playerFlags[i]
		Next

		for local i:int = 0 to withoutPlayerIDs.length-1
			'player 1=1, 2=2, 3=4, 4=8 ...
			withoutPlayerFlags[i]	= getMaskIndex( withoutPlayerIDs[i] )
			withoutFlag :| withoutPlayerFlags[i]
		Next


		local someoneUsesPoint:int			= FALSE
		local allUsePoint:int				= FALSE
		For Local mapValue:TPoint	= EachIn map.Values()
			someoneUsesPoint		= FALSE
			allUsePoint				= FALSE

			'we need to check if one on our ignore list is there
				'no need to do this individual, we can just check the groupFlag
				rem
				local someoneUnwantedUsesPoint:int	= FALSE
				for local i:int = 0 to withoutPlayerFlags.length-1
					if int(mapValue.z) & withoutPlayerFlags[i]
						someoneUnwantedUsesPoint = true
						exit
					endif
				Next
				if someoneUnwantedUsesPoint then continue
				endrem
			if int(mapValue.z) & withoutFlag then continue

			'as we have multiple flags stored in AllFlag, we have to
			'compare the result to see if all of them hit,
			'if only one of it hits, we just check for <>0
			if (int(mapValue.z) & allFlag) = allFlag
				allUsePoint = true
				someoneUsesPoint = true
			else
				for local i:int = 0 to playerFlags.length-1
					if int(mapValue.z) & playerFlags[i] then someoneUsesPoint = true;exit
				Next
			endif
			'someone has a station there
			if someoneUsesPoint then total:+ populationmap[mapValue.x, mapValue.y]
			'all searched have a station there
			if allUsePoint then share:+ populationmap[mapValue.x, mapValue.y]
		Next
		result.setXY(share, total)
		if total = 0 then result.z = 0.0 else result.z = float(share)/float(total)
rem
		print "total: "+total
		print "share:"+share
		print "result:"+result.z
		print "allFlag:"+allFlag
		print "cache:"+cacheKey
		print "--------"
endrem
'TODO: Schauen wieso der Cache-Wert fuer die Quotenberechnung nicht funktioniert
		'add to cache...
		'shareCache.insert(cacheKey, result )

		return result
	End Function


	Function GenerateShareMap:int()
		'reset values
		shareMap = new TMap
		'reset cache here too
		shareCache = new TMap

		'define locals outside of that for loops...
		local posX:int		= 0
		local posY:int		= 0
		local stationX:int	= 0
		local stationY:int	= 0
		local mapKey:string	= ""
		local mapValue:TPoint = null
		local rect:TRectangle = TRectangle.Create(0,0,0,0)
		For local stationmap:TStationMap = eachin List
			For local station:TStation = EachIn stationmap.stations
				'mark the area within the stations circle
				posX = 0
				posY = 0
				stationX = Max(0, station.pos.x)
				stationY = Max(0, station.pos.y)
				Rect.position.SetXY( Max(stationX - stationRadius,stationRadius), Max(stationY - stationRadius,stationRadius) )
				Rect.dimension.SetXY( Min(stationX + stationRadius, self.populationMapSize.x-stationRadius), Min(stationY + stationRadius, self.populationMapSize.y-stationRadius) )

				For posX = Rect.getX() To Rect.getW()
					For posY = Rect.getY() To Rect.getH()
						' left the circle?
						If self.calculateDistance( posX - stationX, posY - stationY ) > stationRadius then continue

						'insert the players bitmask-number into the field
						'and if there is already one ... add the number
						mapKey = posX+","+posY
						mapValue = TPoint.Create(posX,posY, getMaskIndex(stationmap.parent.playerID) )
						If shareMap.Contains(mapKey)
							mapValue.z = int(mapValue.z) | int(TPoint(shareMap.ValueForKey(mapKey)).z)
						endif
						shareMap.Insert(mapKey, mapValue)
					Next
				Next
			Next
		Next
	End Function


	Method _FillPoints(map:TMap var, x:int, y:int, color:int)
		local posX:int=0
		local posY:int=0
		x = Max(0,x)
		y = Max(0,y)
		' innerhalb des Bildes?
		For posX = Max(x - stationRadius,stationRadius) To Min(x + stationRadius, self.populationMapSize.x-stationRadius)
			For posY = Max(y - stationRadius,stationRadius) To Min(y + stationRadius, self.populationMapSize.y-stationRadius)
				' noch innerhalb des Kreises?
				If self.calculateDistance( posX - x, posY - y ) <= stationRadius
					map.Insert(String((posX) + "," + (posY)), TPoint.Create((posX) , (posY), color ))
				EndIf
			Next
		Next
	End Method


	Method CalculateAudienceIncrease:Int(_x:Int, _y:Int)
		Local start:Int = MilliSecs()
		Local Points:TMap = New TMap
		Local returnValue:Int = 0
        Local x:Int = 0, y:Int = 0, posX:Int = 0, posY:Int = 0

		'add "new" station which may be bought
'		If _x = 0 And _y = 0 Then _x = MouseManager.x - 20; _y = MouseManager.y - 10
		If _x = 0 And _y = 0 Then _x = MouseManager.x; _y = MouseManager.y
		self._FillPoints(Points, _x,_y, ARGB_Color(255, 0, 255, 255))

		'overwrite with stations owner already has - red pixels get overwritten with white,
		'count red at the end for increase amount
		For Local _Station:TStation = EachIn stations
			If TFunctions.IsIn(_x,_y, _station.pos.x - 2*stationRadius, _station.pos.y - 2 * stationRadius, 4*stationRadius, 4*stationRadius)
				self._FillPoints(Points, _Station.pos.x, _Station.pos.y, ARGB_Color(255, 255, 255, 255))
			EndIf
		Next

		For Local point:TPoint = EachIn points.Values()
			If ARGB_Red(point.z) = 0 And ARGB_Blue(point.z) = 255
				returnvalue:+ populationmap[point.x, point.y]
			EndIf
		Next
		Return returnvalue
	End Method


	'summary: returns maximum audience a player has
	Method RecalculateAudienceSum:Int()
		Local start:Int = MilliSecs()
		Local Points:TMap = New TMap
        Local x:Int = 0, y:Int = 0, posX:Int = 0, posY:Int = 0
		For Local _Station:TStation = EachIn stations
			self._FillPoints(Points, _Station.pos.x, _Station.pos.y, ARGB_Color(255, 255, 255, 255))
		Next
		Local returnValue:Int = 0

		For Local point:TPoint = EachIn points.Values()
			If ARGB_Red(point.z) = 255 And ARGB_Blue(point.z) = 255
				returnValue:+ populationmap[point.x, point.y]
			EndIf
		Next
		self.reach = returnValue
		Return returnValue
	End Method


	'summary: returns a stations maximum audience reach
	Function CalculateStationReach:Int(x:Int, y:Int)
		Local posX:Int, posY:Int
		Local returnValue:Int = 0
		' für die aktuelle Koordinate die summe berechnen
		' min/max = immer innerhalb des Bildes
		For posX = Max(x - stationRadius,stationRadius) To Min(x + stationRadius, self.populationMapSize.x-stationRadius)
			For posY = Max(y - stationRadius,stationRadius) To Min(y + stationRadius, self.populationMapSize.y-stationRadius)
				' noch innerhalb des Kreises?
				If self.calculateDistance( posX - x, posY - y ) <= stationRadius
					returnvalue:+ populationmap[posX, posY]
				EndIf
			Next
		Next
		Return returnValue
	End Function
End Type

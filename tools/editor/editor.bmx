'
' Example application stub generated by wxCodeGen v1.19 : 04 Apr 2015 08:14:27
'
SuperStrict

Framework wx.wxApp

Import "editor_base.bmx"
Import brl.retro
Import "../../source/Dig/base.util.data.bmx"
Import "../../source/game.database.bmx"
Import "../../source/game.database.bmx"

Global app:MyApp = New MyApp
app.run()

Type MyApp Extends wxApp
	Field dbLoader:TDatabaseLoader
	Field _frameMain:FrameMain

	Method OnInit:Int()
		TLocalization.LoadLanguageFiles("../../res/lang/lang_*.txt")
		'set default language
'		TLocalization.SetCurrentLanguage("en")
		TLocalization.SetCurrentLanguage("de")
		'select user language
		'TLocalization.SetCurrentLanguage(userlanguage)


		_frameMain = FrameMain(New FrameMain.Create(Null, -1, "Editor"))
		_frameMain.show()

		'load db
		dbLoader = New TDatabaseLoader
		dbLoader.LoadDir("../../res/database/Default")

		_frameMain.RecreateProgrammeLicenceList()
	
		Return True
	End Method

End Type



Type FrameMain Extends FrameMainBase
	Field mainGenreChoices:wxPGChoices
	Field _dialogSelectCast:DialogSelectCast
	Field activeProgrammeLicence:TProgrammeLicence

	Method OnInit()
		Super.OnInit()

		' Add own initialisation code here


		local genres:string[]
		local genreID:int
		For local i:int = 0 to TVTProgrammeGenre.genreMaximum
			genreID = TVTProgrammeGenre.GetAtIndex(i)
			if genreID > 0
				genres :+ [ GetLocale("PROGRAMME_GENRE_"+TVTProgrammeGenre.GetAsString(i)) ]
				'TODO: Locale
			endif
		Next

		local oldProp:wxPGProperty
		local pg:wxPropertyGrid = m_propertyGrid_programmeLicence1

		'replace SUBGENRES to fill with valid data
		oldProp = m_pgItem_programmeLicenceSubGenres
		m_pgItem_programmeLicenceSubGenres = new wxMultiChoiceProperty.CreateWithArrays(..
												m_pgItem_programmeLicenceSubGenres.GetLabel(), ..
												m_pgItem_programmeLicenceSubGenres.GetName(), ..
												genres ..
											)
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceSubGenres )


		'=== MAINGENRE ===
		local mainGenres:string[] = [""] + genres
		oldProp = m_pgItem_programmeLicenceMainGenre
		m_pgItem_programmeLicenceMainGenre = new wxEnumProperty.CreateWithArrays(..
												oldProp.GetLabel(), oldProp.GetName(), ..
												mainGenres ..
											)
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceMainGenre)

	
		'=== TARGETGROUP ===
		local targetGroupLabels:string[]
		local targetGroupValues:int[]
		For local i:int = 1 to TVTTargetGroup.count
			targetGroupLabels :+ [TVTTargetGroup.GetAsString( TVTTargetGroup.GetAtIndex(i) )]
			targetGroupValues :+ [TVTTargetGroup.GetAtIndex(i)]
		Next

		oldProp = m_pgItem_programmeLicenceTargetGroups
		m_pgItem_programmeLicenceTargetGroups = new wxFlagsProperty.Create( ..
												oldProp.GetLabel(), oldProp.GetName(), ..
												targetGroupLabels, targetGroupValues, 0 ..
											)
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceTargetGroups )


		'=== PRO-/CONTRA-PRESSUREGROUP ===
		local pressureGroupLabels:string[]
		local pressureGroupValues:int[]
		For local i:int = 1 to TVTPressureGroup.count
			pressureGroupLabels :+ [TVTPressureGroup.GetAsString( TVTPressureGroup.GetAtIndex(i) )]
			pressureGroupValues :+ [TVTPressureGroup.GetAtIndex(i)]
		Next
		'PRO
		oldProp = m_pgItem_programmeLicenceProPressureGroups
		m_pgItem_programmeLicenceProPressureGroups = new wxFlagsProperty.Create( oldProp.GetLabel(), oldProp.GetName(), pressureGroupLabels, pressureGroupValues, 0 )
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceProPressureGroups )
		'CONTRA
		oldProp = m_pgItem_programmeLicenceContraPressureGroups
		m_pgItem_programmeLicenceContraPressureGroups = new wxFlagsProperty.Create( oldProp.GetLabel(), oldProp.GetName(), pressureGroupLabels, pressureGroupValues, 0 )
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceContraPressureGroups )



		'remove and refill flags-checkboxlist
		m_checkList_programmeLicenceFlags.Clear()
		For local i:int = 1 to TVTProgrammeFlag.count
			local flag:int = TVTProgrammeFlag.GetAtIndex(i)
			m_checkList_programmeLicenceFlags.Append( GetLocale("PROGRAMME_FLAG_" + TVTProgrammeFlag.GetAsString(flag)) )
		Next


		'=== CAST LIST CTRL ===
		RecreateProgrammeLicenceCastList()
	End Method


	Method OnProgrammeLicenceLicencesSize(event:wxSizeEvent)
		ResizeProgrammeLicenceList()
		ResizeProgrammeLicenceCastList()

		event.Skip()
	End Method

	
	'override
	Method OnProgrammeLicenceLicencesItemSelected(event:wxListEvent)
		local licence:TProgrammeLicence = TProgrammeLicence(m_listCtrl_programmeLicenceLicences.GetItemData( event.GetIndex() ))
		if not licence
			print "OnProgrammeLicenceLicencesItemSelected: no licence found"
		else
			'set active licence
			activeProgrammeLicence = licence
			'separately fill the data (maybe we have a "new" licence, or
			'copy base data from a series...
			FillProgrammeLicenceForm(licence)
		endif
	End Method


	Method OnProgrammeLicenceAddCast(event:wxCommandEvent)
		'open a dialogue
		if not _dialogSelectCast
			_dialogSelectCast = DialogSelectCast(New DialogSelectCast.Create(null, -1, "Select Cast"))
		endif
		if(_dialogSelectCast.ShowModal() = 1)
			'TODO: Fetch cast data and takeover to form
			print "ok"
		endif
		
		'remove dialog again (else programme will run forever)
		_dialogSelectCast.Free()
		_dialogSelectCast = null	
	End Method


	Method OnProgrammeLicenceRemoveCast(event:wxCommandEvent)
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		Local item:Int = -1
		item = list.GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED)
		if item <= -1 then return 'nothing selected

		Local job:TProgrammePersonJob = TProgrammePersonJob(list.GetItemData(item))

		list.DeleteItem(item)

		activeProgrammeLicence.GetData().RemoveCast(job)
	End Method
	

	Method OnProgrammeLicenceMoveCastUp(event:wxCommandEvent)
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		Local item:Int = -1
		item = list.GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED)
		if item <= -1 then return 'nothing selected
		if item = 0 then return 'already on top

		'unselect current
		list.SetItemState(item, not wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED)
		'select new position
		list.SetItemState(item-1, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED)

		ProgrammeLicence_SwitchCast(item, item-1)
	End Method


	Method OnProgrammeLicenceMoveCastDown(event:wxCommandEvent)
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		Local item:Int = -1
		item = list.GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED)
		if item <= -1 then return 'nothing selected
		if item >= list.GetItemCount()-1 then return 'already on bottom

		'unselect current
		list.SetItemState(item, not wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED)
		'select new position
		list.SetItemState(item+1, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED)

		ProgrammeLicence_SwitchCast(item, item+1)
	End Method
	
	
	'ratings value from [slider] to [textctrl]
	Method OnProgrammeLicenceRatingsSliderScroll(event:wxScrollEvent)
		local sender:wxSlider = wxSlider(event.parent)
		local value:String = FloatToPercentageString( sender.GetValue()/10.0 )

		Select sender
			case m_slider_programmeLicenceReview
				m_textCtrl_programmeLicenceReview.SetValue( value )
			case m_slider_programmeLicenceSpeed
				m_textCtrl_programmeLicenceSpeed.SetValue( value )
			case m_slider_programmeLicenceOutcome
				m_textCtrl_programmeLicenceOutcome.SetValue( value)
		End Select
	End Method


	'ratings value from [textctrl] to [slider]
	Method OnProgrammeLicenceRatingsTextCtrlText(event:wxCommandEvent)
		local sender:wxTextCtrl = wxTextCtrl(event.parent)
		local value:Int = 10*Float(sender.GetValue())
		Select sender
			case m_textCtrl_programmeLicenceReview
				m_slider_programmeLicenceReview.SetValue( value )
			case m_textCtrl_programmeLicenceSpeed
				m_slider_programmeLicenceSpeed.SetValue( value )
			case m_textCtrl_programmeLicenceOutcome
				m_slider_programmeLicenceOutcome.SetValue( value )
		End Select
	End Method




	Method ResizeProgrammeLicenceCastList()
		if m_listCtrl_programmeLicenceCast.GetColumnCount() >= 2
			local w:int, h:int
			m_listCtrl_programmeLicenceCast.GetClientSize(w, h)
			m_listCtrl_programmeLicenceCast.SetColumnWidth(0, w - 120)
			m_listCtrl_programmeLicenceCast.SetColumnWidth(1, 120)
		endif
	End Method


	Method RecreateProgrammeLicenceCastList()
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		list.ClearAll()
		list.InsertColumn(0, "Name")
		list.InsertColumn(1, "Job", wxLIST_FORMAT_RIGHT)

		ResizeProgrammeLicenceCastList()
	End Method


	Method ResizeProgrammeLicenceList()
		if m_listCtrl_programmeLicenceLicences.GetColumnCount() >= 4
			local w:int, h:int
			m_listCtrl_programmeLicenceLicences.GetClientSize(w, h)
			local wLeft:int = w - 80 - 80 - 100 - 20 '-20 is margin etc
			m_listCtrl_programmeLicenceLicences.SetColumnWidth(0, wLeft)
			m_listCtrl_programmeLicenceLicences.SetColumnWidth(1, 80)
			m_listCtrl_programmeLicenceLicences.SetColumnWidth(2, 80)
			m_listCtrl_programmeLicenceLicences.SetColumnWidth(3, 100)
'			print w
			'TODO: On Maximize followed by Minimize the "onSize" is not
			'      called
		endif
	End Method
	

	Method RecreateProgrammeLicenceList()
		local list:wxListCtrl = m_listCtrl_programmeLicenceLicences
		list.DeleteAllItems()
		list.InsertColumn(0, "Title")
		list.InsertColumn(1, "Year", wxLIST_FORMAT_RIGHT)
		list.InsertColumn(2, "Type", wxLIST_FORMAT_RIGHT)
		list.InsertColumn(3, "Author", wxLIST_FORMAT_RIGHT)
		' To speed up inserting we hide the control temporarily
		list.Hide()

		local entryNum:int = 0
		For Local l:TProgrammeLicence = EachIn GetProgrammeLicenceCollection().singles
			list.InsertStringItem(entryNum, l.GetTitle())
			list.SetStringItem(entryNum, 1, l.GetData().year )
			list.SetStringItem(entryNum, 2, TVTProgrammeLicenceType.GetAsString(l.GetData().programmeLicenceType) )
			list.SetStringItem(entryNum, 3, l.GetData().createdBy )
			'maybe we could just store the GUID here?
			'or something which does NOT change at all? 
			list.SetItemData(entryNum, l)

			entryNum :+ 1
		Next

		list.Show()
	End Method


	Method FillProgrammeLicenceForm:Int(licence:TProgrammeLicence)
		'text
		'TODO: fill "language box" with available languages
		'TODO: set current language as selected one
		'TODO: fill "language specific data" (of selected lang)
		m_textCtrl_programmeLicenceTitle.SetValue(licence.GetTitle())
		m_textCtrl_programmeLicenceOriginalTitle.SetValue(licence.GetData().GetOriginalTitle())
		m_textCtrl_programmeLicenceDescription.SetValue(licence.GetDescription())

		'ratings
		m_textCtrl_programmeLicenceOutcome.SetValue( FloatToPercentageString( licence.GetData().GetOutcome() * 100.0 ) )
		m_textCtrl_programmeLicenceSpeed.SetValue( FloatToPercentageString( licence.GetData().GetSpeed() * 100.0 ) )
		m_textCtrl_programmeLicenceReview.SetValue( FloatToPercentageString( licence.GetData().GetReview() * 100.0 ) )

		'base data
		m_pgItem_programmeLicenceBlocks.SetValueInt( licence.GetData().GetBlocks() )
		m_pgItem_programmeLicenceYear.SetValueInt( licence.GetData().year )
		m_pgItem_programmeLicenceCountry.SetValueString( licence.GetData().country )

		m_pgItem_programmeLicenceMainGenre.SetChoiceSelection( licence.GetData().genre + 1 )

		'transfer "genres" to "array indizes"
		local subGenres:int[]
		local s:string
		For local i:int = EachIn licence.GetData().subGenres
			subGenres :+ [i-1]
			s :+ (i-1)+","
		Next
		m_pgItem_programmeLicenceSubGenres.SetValueIntArray(subGenres)

		'get
		'm_pgItem_programmeLicenceMainGenre.GetChoiceSelection()

		'remove "modified"-state from all
		'item.SetWasModified(false)

		m_pgItem_programmeLicenceGUID.SetValueString( licence.GetGUID() )



		'flags
		For local i:int = 1 to TVTProgrammeFlag.count
			local flag:int = TVTProgrammeFlag.GetAtIndex(i)
			m_checkList_programmeLicenceFlags.Check( i - 1, licence.GetData().HasFlag(flag) )
		Next

		'cast
		RecreateProgrammeLicenceCastList()
		ProgrammeLicence_AddCast( licence.GetData().GetCast() )
		
		'author data
		m_pgItem_programmeLicenceCreator.SetValueInt( licence.GetData().creator )
		m_pgItem_programmeLicenceCreatedBy.SetValueString( licence.GetData().createdBy )
	End Method


	Method ProgrammeLicence_AddCast:int(jobs:TProgrammePersonJob[])
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		local jobNum:int = list.GetItemCount()
		For local j:TProgrammePersonJob = EachIn jobs
			'skip existing ones?
'			if activeProgrammeLicence.GetData().HasCast(j) then continue

			activeProgrammeLicence.GetData().AddCast(j)

			list.InsertStringItem(jobNum, j.person.GetFullName())
			list.SetStringItem(jobNum, 1, GetLocale("MOVIE_" + TVTProgrammePersonJob.GetAsString(j.job) ) )
			list.SetItemData(jobNum, j)


			jobNum :+ 1
		Next
	End Method


	Method ProgrammeLicence_SwitchCast:int(jobLineA:int, jobLineB:int)
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		local jobA:TProgrammePersonJob = TProgrammePersonJob(list.GetItemData(jobLineA))
		local jobB:TProgrammePersonJob = TProgrammePersonJob(list.GetItemData(jobLineB))

		list.SetStringItem(jobLineB, 0, jobA.person.GetFullName())
		list.SetStringItem(jobLineB, 1, GetLocale("MOVIE_" + TVTProgrammePersonJob.GetAsString(jobA.job) ) )
		list.SetItemData(jobLineB, jobA)

		list.SetStringItem(jobLineA, 0, jobB.person.GetFullName())
		list.SetStringItem(jobLineA, 1, GetLocale("MOVIE_" + TVTProgrammePersonJob.GetAsString(jobB.job) ) )
		list.SetItemData(jobLineA, jobB)

		'switch in licence too
		activeProgrammeLicence.GetData().cast[jobLineB] = jobA
		activeProgrammeLicence.GetData().cast[jobLineA] = jobB
	End Method


	Method ProgrammeLicence_ClearCast:int()
		'TODO: remove from "TProgrammeData"
	
		RecreateProgrammeLicenceCastList()
	End Method
rem
	'when an entry in the licences-list is selected
	Method OnProgrammeLicenceLicencesChange(event:wxTreeEvent)
		local treeItem:wxTreeItemId = event.GetItem()
		local tree:wxTreeCtrl = m_treeCtrl_programmeLicences
		local data:TData = TData(tree.GetItemData(treeItem))
		if not data then print "no data"

		print "onchange to guid:"+data.GetString("GUID")
	End Method
endrem


	Function FloatToPercentageString:String(f:Float)
		local value:String = string(f).Replace(",",".")
		value = Left(value, 4)
		if value[2..] = ".0" then value = Left(value, 2)
		if len(value) > 3 and value[(len(value)-3)..] = ".00" then value = int(value)
		if value = "0.00" then value = "0"
		if value = "100." then value = "100"
		return value
	End Function
End Type




Type DialogSelectCast Extends DialogSelectCastBase
	Field listSortBy:string
	Field listSortDirection:int = -1
	Field colNames:string[] = ["Name", "Original", "Real/Fictive"]


	Method OnInit()
		Super.OnInit()

		'=== LIST ===
		local list:wxListCtrl = m_listCtrl_SelectCastPersonList
		list.DeleteAllItems()
		list.InsertColumn(0, colNames[0])
		list.InsertColumn(1, colNames[1])
		list.InsertColumn(2, colNames[2])
		
		' To speed up inserting we hide the control temporarily
		list.Hide()

		local entryNum:int = 0
		For Local p:TProgrammePersonBase = EachIn GetProgrammePersonCollection().celebrities.Values()
			list.InsertStringItem(entryNum, p.GetLastName()+", "+p.GetFirstName())
			list.SetStringItem(entryNum, 1, "" )
			if p.fictional
				list.SetStringItem(entryNum, 2, "fictional" )
			else
				list.SetStringItem(entryNum, 2, "real" )
			endif
			'maybe we could just store the GUID here?
			'or something which does NOT change at all? 
			list.SetItemData(entryNum, p)

			entryNum :+ 1
		Next

		list.SetColumnWidth(0, 200)
		list.SetColumnWidth(1, 200)
		list.SetColumnWidth(2, 80)
		
		list.Show()


		'=== JOB CHOICE ===
		m_choice_job.Clear()
		For local i:int = 1 to TVTProgrammePersonJob.count
			local key:int = TVTProgrammePersonJob.GetAtIndex(i)
			m_choice_job.Append( GetLocale("MOVIE_" + TVTProgrammePersonJob.GetAsString(key)), new TData.AddNumber("jobKey", key) )
		Next
	End Method


	Method OnListColClick(event:wxListEvent)
		Local col:Int = wxListEvent(event).GetColumn()
		Local item:wxListItem = wxListEvent(event).GetItem()
		local list:wxListCtrl = m_listCtrl_SelectCastPersonList
		local oldListSortBy:string = listSortBy
		if col < 0 and col > 2 then return 

		if col = 0
			listSortBy = "name"
		elseif col = 1
			listSortBy = "original"
		else
			listSortBy = "type"
		endif

		if listSortBy = oldListsortBy
			listSortDirection = not listSortDirection
		else
			listSortDirection = 0
		endif
'		print "sort by: "+listSortBy+"  direction: "+listSortDirection


		local i:wxListItem = wxListItem.CreateListItem()
		for local myCol:int = 0 to 2
			'store current column-header in "i"
			list.GetColumn(myCol, i)

			if myCol = col
				if listSortDirection = 0
					'item.SetMask(wxLIST_MASK_IMAGE)
					'item.SetImage(image)
					i.SetText(colNames[col] + " [A..Z]")
				else
					i.SetText(colNames[col] + " [Z..A]")
				endif
			else
				'reset all other columns
				i.SetText(colNames[myCol])
			endif

			list.SetColumn(myCol, i)
		Next

		list.SortItems(SortPersons, New TData.AddString("sort", listSortBy).AddNumber("direction", listSortDirection))
	End Method



	Method OnSelectCast(event:wxCommandEvent)
		local list:wxListCtrl = m_listCtrl_SelectCastPersonList

		'nothing selected
		if list.GetSelectedItemCount() <= 0 then return 'do nothing
		
		'get first selected item
		Local item:Int = -1
		item = list.GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED)
		if item = -1 then return 'do nothing


		local person:TProgrammePersonBase = TProgrammePersonBase( list.GetItemData(item) )
		if not person
			'failed
			EndModal(-1)
			return
		endif


		'TODO: jobID als Data in DropDown hinterlegen
		local selectedJob:int = m_choice_job.GetSelection()
		if selectedJob = wxNOT_FOUND then return 'do nothing

		local jobData:TData = TData(m_choice_job.GetItemClientData(selectedJob))
		if not jobData then return 'failed

		local jobKey:int = jobData.GetInt("jobKey", TVTProgrammePersonJob.UNKNOWN)

		local job:TProgrammePersonJob = New TProgrammePersonJob.Init(person, jobKey)
		app._frameMain.ProgrammeLicence_AddCast([job])
		
		'close dialogue
		EndModal(1)
	End Method




	'ther "item" is the "GetData()"-data stored in the wxListItem! 
	Function SortPersons:Int(item1:Object, item2:Object, data:Object)
		local p1:TProgrammePersonBase = TProgrammePersonBase(item1)
		local p2:TProgrammePersonBase = TProgrammePersonBase(item2)
		if not p1 then return 1
		if not p2 then return -1

		local d:TData = TData(data)
		local sort:string = "name"
		local direction:int = 0
		if d
			sort = d.GetString("sort", sort)
			direction = d.GetInt("direction", direction)
		endif

		local before:int = -1, after:int = 1
		'switch direction?
		if direction = 1 then before=1;after=-1

		
		Select sort.ToLower()
			case "type"
				'sort by type and then name
				'TODO
				local n1:string = p1.GetLastName()+", "+p1.GetFirstName() 
				local n2:string = p2.GetLastName()+", "+p2.GetFirstName()
				if p1.fictional = p2.fictional
					if n1 < n2
						return before
					elseif n1 > n2
						return after
					endif
				else
					if p1.fictional and not p2.fictional
						return before
					else
						return after
					endif
				endif
			case "original"
				'TODO
				local n1:string = p1.GetLastName()+", "+p1.GetFirstName() 
				local n2:string = p2.GetLastName()+", "+p2.GetFirstName() 
				if n1 < n2
					return before
				elseif n1 > n2
					return after
				endif
			default 'by name
				local n1:string = p1.GetLastName()+", "+p1.GetFirstName() 
				local n2:string = p2.GetLastName()+", "+p2.GetFirstName() 
				if n1 < n2
					return before
				elseif n1 > n2
					return after
				endif
		End Select
		return 0
	End Function
End Type

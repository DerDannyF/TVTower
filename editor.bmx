'
' Example application stub generated by wxCodeGen v1.19 : 04 Apr 2015 08:14:27
'
SuperStrict

Framework brl.StandardIO
Import wx.wxApp
Import "tools/editor/editor_base.bmx"
Import brl.retro
Import "source/Dig/base.util.data.bmx"
Import "source/game.database.bmx"

'audienceSim
Import "source/game.player.base.bmx"
Import "source/game.player.programmeplan.bmx"
Import "source/game.registry.loaders.bmx"

Import brl.reflection

TLogger.Log("CORE", "Starting TVTEditor.", LOG_INFO )
TLogger.SetPrintMode(LOG_ERROR)




Global app:MyApp = New MyApp
app.run()

Type MyApp Extends wxApp
	Field dbLoader:TEditorDatabaseLoader
	Field _frameMain:FrameMain


	Method OnInit:Int()
		TLocalization.LoadLanguageFiles("res/lang/lang_*.txt")
		'set default language
'		TLocalization.SetCurrentLanguage("en")
		TLocalization.SetCurrentLanguage("de")
		'select user language
		'TLocalization.SetCurrentLanguage(userlanguage)


		_frameMain = FrameMain(New FrameMain.Create(Null, -1, "Editor"))
		_frameMain.show()

		'audienceSim
		'load genre definitions
		local registryLoader:TRegistryLoader = new TRegistryLoader
		registryLoader.LoadFromXML("config/programmedatamods.xml", true)
		registryLoader.LoadFromXML("config/newsgenres.xml", true)


		GetMovieGenreDefinitionCollection().Initialize()
		GetNewsGenreDefinitionCollection().Initialize()

		'load db
		dbLoader = New TEditorDatabaseLoader
		dbLoader.LoadDir("res/database/Default")

		_frameMain.RecreateProgrammeLicenceList(_frameMain.m_listCtrl_AudienceSim_ProgrammeLicences)
		_frameMain.RecreateProgrammeLicenceList(_frameMain.m_listCtrl_ProgrammeLicences_ProgrammeLicences)
		_frameMain.AudienceSim_RecreateAudiencesList()

		'RONNY: save db
	'	dbLoader.Save("test.xml")
		
		'hide block parts
		_frameMain.m_staticText_blockCount.Hide()
		_frameMain.m_staticText_block.Hide()
		_frameMain.m_spinCtrl_block.Hide()
		

		'create some players to work with (public image and so on)
		for local i:int = 1 to 4
			local p:TPlayerBase = new TPlayerBase
			p.name = "Spieler "+i
			p.channelname = "Sender "+i
			p.playerID = i

			TPublicImage.Create(p.playerID)
'			new TPlayerProgrammeCollection.Create(p.playerID)
'			new TPlayerProgrammePlan.Create(p.playerID)

			GetPlayerBaseCollection().Set(1, p)
		Next

	
		Return True
	End Method

End Type



Type FrameMain Extends FrameMainBase
	Field mainGenreChoices:wxPGChoices
	Field _dialogSelectCast:DialogSelectCast

	Field programmeLicenceListColNames:string[] = ["Title", "Year", "Type", "Author"]
	Field programmeLicenceListSortBy:string
	Field programmeLicenceListSortDirection:int = 0

	Field ProgrammeLicences_activeProgrammeLicence:TProgrammeLicence
	Field AudienceSim_activeProgrammeLicence:TProgrammeLicence[4]
	Field AudienceSim_activeAudienceHour:int


	Method OnInit()
		Super.OnInit()

		' Add own initialisation code here


		local genres:string[]
		local genreID:int
		For local i:int = 0 to TVTProgrammeGenre.genreMaximum
			genreID = TVTProgrammeGenre.GetAtIndex(i)
			if genreID > 0
				genres :+ [ GetLocale("PROGRAMME_GENRE_"+TVTProgrammeGenre.GetAsString(i)) ]
			endif
		Next

		local oldProp:wxPGProperty
		local pg:wxPropertyGrid = m_propertyGrid_programmeLicence1

		'replace SUBGENRES to fill with valid data
		oldProp = m_pgItem_programmeLicenceSubGenres
		m_pgItem_programmeLicenceSubGenres = new wxMultiChoiceProperty.CreateWithArrays(..
												m_pgItem_programmeLicenceSubGenres.GetLabel(), ..
												m_pgItem_programmeLicenceSubGenres.GetName(), ..
												genres ..
											)
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceSubGenres )


		'=== MAINGENRE ===
		local mainGenres:string[] = [""] + genres
		oldProp = m_pgItem_programmeLicenceMainGenre
		m_pgItem_programmeLicenceMainGenre = new wxEnumProperty.CreateWithArrays(..
												oldProp.GetLabel(), oldProp.GetName(), ..
												mainGenres ..
											)
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceMainGenre)

	
		'=== TARGETGROUP ===
		local targetGroupLabels:string[]
		local targetGroupValues:int[]
		For local i:int = 1 to TVTTargetGroup.count
			targetGroupLabels :+ [GetLocale("TARGETGROUP_" + TVTTargetGroup.GetAsString( TVTTargetGroup.GetAtIndex(i) ))]
			targetGroupValues :+ [TVTTargetGroup.GetAtIndex(i)]
		Next

		oldProp = m_pgItem_programmeLicenceTargetGroups
		m_pgItem_programmeLicenceTargetGroups = new wxFlagsProperty.Create( ..
												oldProp.GetLabel(), oldProp.GetName(), ..
												targetGroupLabels, targetGroupValues, 0 ..
											)
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceTargetGroups )


		'=== PRO-/CONTRA-PRESSUREGROUP ===
		local pressureGroupLabels:string[]
		local pressureGroupValues:int[]
		For local i:int = 1 to TVTPressureGroup.count
			pressureGroupLabels :+ [TVTPressureGroup.GetAsString( TVTPressureGroup.GetAtIndex(i) )]
			pressureGroupValues :+ [TVTPressureGroup.GetAtIndex(i)]
		Next
		'PRO
		oldProp = m_pgItem_programmeLicenceProPressureGroups
		m_pgItem_programmeLicenceProPressureGroups = new wxFlagsProperty.Create( oldProp.GetLabel(), oldProp.GetName(), pressureGroupLabels, pressureGroupValues, 0 )
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceProPressureGroups )
		'CONTRA
		oldProp = m_pgItem_programmeLicenceContraPressureGroups
		m_pgItem_programmeLicenceContraPressureGroups = new wxFlagsProperty.Create( oldProp.GetLabel(), oldProp.GetName(), pressureGroupLabels, pressureGroupValues, 0 )
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceContraPressureGroups )


		'=== PRODUCT TYPE ===
		local productTypes:string[] = [""]
		local productTypeID:int
		For local i:int = 0 to TVTProgrammeProductType.count
			productTypeID = TVTProgrammeProductType.GetAtIndex(i)
			if productTypeID > 0
				productTypes :+ [ GetLocale("PROGRAMME_PRODUCTTYPE_"+TVTProgrammeProductType.GetAsString(i)) ]
			endif
		Next

		oldProp = m_pgItem_programmeLicenceProduct
		m_pgItem_programmeLicenceProduct = new wxEnumProperty.CreateWithArrays(..
											oldProp.GetLabel(), oldProp.GetName(), ..
											productTypes ..
										)
		pg.ReplaceProperty( oldProp, m_pgItem_programmeLicenceProduct)


		'remove and refill flags-checkboxlist
		m_checkList_programmeLicenceFlags.Clear()
		For local i:int = 1 to TVTProgrammeDataFlag.count
			local flag:int = TVTProgrammeDataFlag.GetAtIndex(i)
			m_checkList_programmeLicenceFlags.Append( GetLocale("PROGRAMME_FLAG_" + TVTProgrammeDataFlag.GetAsString(flag)) )
		Next


		'=== CAST LIST CTRL ===
		RecreateProgrammeLicenceCastList()


		ConnectAny(wxEVT_PG_SELECTED, OnProgrammeLicencePropGridSelect, Null, Self)
	End Method



	'==== PROGRAMME LICENCES ====

	Method OnProgrammeLicences_ProgrammeLicencesSize(event:wxSizeEvent)
		ResizeProgrammeLicenceList(m_listCtrl_ProgrammeLicences_ProgrammeLicences)
		ResizeProgrammeLicenceCastList()

		event.Skip()
	End Method

	
	'override
	Method OnProgrammeLicences_ProgrammeLicencesItemSelected(event:wxListEvent)
		local licence:TProgrammeLicence = TProgrammeLicence(m_listCtrl_ProgrammeLicences_ProgrammeLicences.GetItemData( event.GetIndex() ))
		if not licence
			print "OnProgrammeLicenceLicencesItemSelected: no licence found"
		else
			'set active licence
			ProgrammeLicences_activeProgrammeLicence = licence
			'separately fill the data (maybe we have a "new" licence, or
			'copy base data from a series...
			FillProgrammeLicenceForm(licence)
		endif
	End Method


	Method OnProgrammeLicenceAddCast(event:wxCommandEvent)
		'open a dialogue
		if not _dialogSelectCast
			_dialogSelectCast = DialogSelectCast(New DialogSelectCast.Create(null, -1, "Select Cast"))
		endif
		if(_dialogSelectCast.ShowModal() = 1)
			'TODO: Fetch cast data and takeover to form
			print "ok"
		endif
		
		'remove dialog again (else programme will run forever)
		_dialogSelectCast.Free()
		_dialogSelectCast = null	
	End Method


	Method OnProgrammeLicenceRemoveCast(event:wxCommandEvent)
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		Local item:Int = -1
		item = list.GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED)
		if item <= -1 then return 'nothing selected

		Local job:TProgrammePersonJob = TProgrammePersonJob(list.GetItemData(item))

		list.DeleteItem(item)

		ProgrammeLicences_activeProgrammeLicence.GetData().RemoveCast(job)
	End Method
	

	Method OnProgrammeLicenceMoveCastUp(event:wxCommandEvent)
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		Local item:Int = -1
		item = list.GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED)
		if item <= -1 then return 'nothing selected
		if item = 0 then return 'already on top

		'unselect current
		list.SetItemState(item, not wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED)
		'select new position
		list.SetItemState(item-1, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED)

		ProgrammeLicence_SwitchCast(item, item-1)
	End Method


	Method OnProgrammeLicenceMoveCastDown(event:wxCommandEvent)
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		Local item:Int = -1
		item = list.GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED)
		if item <= -1 then return 'nothing selected
		if item >= list.GetItemCount()-1 then return 'already on bottom

		'unselect current
		list.SetItemState(item, not wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED)
		'select new position
		list.SetItemState(item+1, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED)

		ProgrammeLicence_SwitchCast(item, item+1)
	End Method
	
	
	'ratings value from [slider] to [textctrl]
	Method OnProgrammeLicenceRatingsSliderScroll(event:wxScrollEvent)
		local sender:wxSlider = wxSlider(event.parent)
		local value:String = FloatToPercentageString( sender.GetValue()/10.0 )

		Select sender
			case m_slider_programmeLicenceReview
				m_textCtrl_programmeLicenceReview.SetValue( value )
			case m_slider_programmeLicenceSpeed
				m_textCtrl_programmeLicenceSpeed.SetValue( value )
			case m_slider_programmeLicenceOutcome
				m_textCtrl_programmeLicenceOutcome.SetValue( value)
		End Select
	End Method


	'ratings value from [textctrl] to [slider]
	Method OnProgrammeLicenceRatingsTextCtrlText(event:wxCommandEvent)
		local sender:wxTextCtrl = wxTextCtrl(event.parent)
		local value:Int = 10*Float(sender.GetValue())
		Select sender
			case m_textCtrl_programmeLicenceReview
				m_slider_programmeLicenceReview.SetValue( value )
			case m_textCtrl_programmeLicenceSpeed
				m_slider_programmeLicenceSpeed.SetValue( value )
			case m_textCtrl_programmeLicenceOutcome
				m_slider_programmeLicenceOutcome.SetValue( value )
		End Select
	End Method


	Method OnProgrammeLicences_ProgrammeLicencesListColClick(event:wxListEvent)
		Local col:Int = wxListEvent(event).GetColumn()
		Local item:wxListItem = wxListEvent(event).GetItem()
		local list:wxListCtrl = m_listCtrl_ProgrammeLicences_ProgrammeLicences
		local oldListSortBy:string = programmeLicenceListSortBy
		'only support cols 1 and 2
		if col < 0 and col > 1 then return 

		if col = 0
			programmeLicenceListSortBy = "title"
		elseif col = 1
			programmeLicenceListSortBy = "year"
		endif

		if programmeLicenceListSortBy = oldListsortBy
			programmeLicenceListSortDirection = not programmeLicenceListSortDirection
		else
			programmeLicenceListSortDirection = 0
		endif
		'print "sort by: "+listSortBy+"  direction: "+listSortDirection


		local i:wxListItem = wxListItem.CreateListItem()
		for local myCol:int = 0 to 2
			'store current column-header in "i"
			list.GetColumn(myCol, i)

			if myCol = col
				if programmeLicenceListSortDirection = 0
					'item.SetMask(wxLIST_MASK_IMAGE)
					'item.SetImage(image)
					if col = 1
						i.SetText(programmeLicenceListColNames[col] + " [1..9]")
					else
						i.SetText(programmeLicenceListColNames[col] + " [A..Z]")
					endif
				else
					if col = 1
						i.SetText(programmeLicenceListColNames[col] + " [9..1]")
					else
						i.SetText(programmeLicenceListColNames[col] + " [Z..A]")
					endif
				endif
			else
				'reset all other columns
				i.SetText(programmeLicenceListColNames[myCol])
			endif

			list.SetColumn(myCol, i)
		Next

		list.SortItems(SortProgrammeLicences, New TData.AddString("sort", programmeLicenceListSortBy).AddNumber("direction", programmeLicenceListSortDirection))
	End Method


	Function OnProgrammeLicencePropGridSelect(event:wxEvent)
		Local frame:FrameMain = FrameMain(event.parent)
		Local evt:wxPropertyGridEvent = wxPropertyGridEvent(event)
		Local property:wxPGProperty = evt.GetProperty()
		if not frame or not property then return

		Select property
			case frame.m_pgItem_programmeLicenceBlocks
				frame.SetStatusBarText( GetLocale("Blocks: length in hours") )
			case frame.m_pgItem_programmeLicenceYear
				frame.SetStatusBarText( GetLocale("Year: year of initial release") )
			default
				frame.SetStatusBarText("TVTower Editor")
		EndSelect

		event.Skip()
	End Function



	'==== AUDIENCE SIM ====
	Method OnAudienceSim_ProgrammeLicencesSize(event:wxSizeEvent)
		ResizeProgrammeLicenceList(m_listCtrl_AudienceSim_ProgrammeLicences)
		AudienceSim_ResizeAudiencesList()

		event.Skip()
	End Method


	Method OnAudienceSim_ProgrammeLicencesItemSelected(event:wxListEvent)
		local licence:TProgrammeLicence = TProgrammeLicence(m_listCtrl_ProgrammeLicences_ProgrammeLicences.GetItemData( event.GetIndex() ))
		if not licence
			print "OnAudienceSim_ProgrammeLicencesItemSelected: no licence found"
		'skip collection and series headers
		elseif not licence.IsSeries() and not licence.IsCollection()
			'set active licence
			AudienceSim_activeProgrammeLicence[0] = licence

			m_spinCtrl_block.SetRange(1, licence.GetData().GetBlocks())
			m_staticText_blockCount.SetLabel( "/ " + licence.GetData().GetBlocks() )
			
			AudienceSim_RunAudienceSimulation()
		endif
	End Method


	Method OnAudienceSimChangeSettings(event:wxCommandEvent)
		AudienceSim_RunAudienceSimulation()
	End Method


	Method onAudienceSim_ChannelProgrammeClick(event:wxCommandEvent)
		local sender:wxButton = wxButton(event.parent)
		if not sender then return
		
		local receiver:wxButton
		Select sender
			case m_button_AudienceSim_channel2Programme
				AudienceSim_activeProgrammeLicence[2 -1] = AudienceSim_activeProgrammeLicence[0]
				receiver = m_button_AudienceSim_channel2Programme
			case m_button_AudienceSim_channel3Programme
				AudienceSim_activeProgrammeLicence[3 -1] = AudienceSim_activeProgrammeLicence[0]
				receiver = m_button_AudienceSim_channel3Programme
			case m_button_AudienceSim_channel4Programme
				AudienceSim_activeProgrammeLicence[4 -1] = AudienceSim_activeProgrammeLicence[0]
				receiver = m_button_AudienceSim_channel4Programme
		End Select

		if receiver
			if AudienceSim_activeProgrammeLicence[1 -1]
				receiver.SetLabel( AudienceSim_activeProgrammeLicence[1 -1].GetTitle() )
			endif
			AudienceSim_RunAudienceSimulation()
		endif
	End Method


	Method onAudienceSim_RemoveChannelProgrammeClick(event:wxCommandEvent)
		local sender:wxButton = wxButton(event.parent)
		if not sender then return

		local receiver:wxButton
		Select sender
			case m_button_AudienceSim_removeChannel2Programme
				AudienceSim_activeProgrammeLicence[2 -1] = null
				receiver = m_button_AudienceSim_channel2Programme
			case m_button_AudienceSim_removeChannel3Programme
				AudienceSim_activeProgrammeLicence[3 -1] = null
				receiver = m_button_AudienceSim_channel3Programme
			case m_button_AudienceSim_removeChannel4Programme
				AudienceSim_activeProgrammeLicence[4 -1] = null
				receiver = m_button_AudienceSim_channel4Programme
		End Select

		if receiver
			if AudienceSim_activeProgrammeLicence[1 -1]
				receiver.SetLabel( "" )
			endif
			AudienceSim_RunAudienceSimulation()
		endif
	End Method


	Method OnAudienceSim_AudiencesItemSelected(event:wxListEvent)
		local hour:int = event.GetIndex()
		if hour < 0 or hour > 23 then return
		AudienceSim_activeAudienceHour = hour

		AudienceSim_RefreshSummary()
	End Method

	


	Method AudienceSim_ResizeAudiencesList()
		if m_listCtrl_audiences.GetColumnCount() >= TVTTargetGroup.count + 1 + 1
			local w:int, h:int
			m_listCtrl_audiences.GetClientSize(w, h)
			local wLeft:int = w - 35
			local wGroup:Int = Floor(wLeft/(TVTTargetGroup.count+1))
			m_listCtrl_audiences.SetColumnWidth(0, 35)
			For local i:int = 0 to TVTTargetGroup.count
				m_listCtrl_audiences.SetColumnWidth(i+1, wGroup)
			Next
		endif
	End Method


	Method AudienceSim_RecreateAudiencesList()
		local list:wxListCtrl = m_listCtrl_audiences
		list.DeleteAllItems()
		list.InsertColumn(0, "Uhr")
		For local i:int = 0 to TVTTargetGroup.count '0-9
			list.InsertColumn(i+1, GetLocale("TARGETGROUP_"+TVTTargetGroup.GetAsString(TVTTargetGroup.GetAtIndex(i))) )
		Next
		' To speed up inserting we hide the control temporarily
		list.Hide()

		For local clock:int = 0 to 23
			list.InsertStringItem(clock, clock)
			For local i:int = 0 to TVTTargetGroup.count '0-9
				list.SetStringItem(clock, i+1, 0)
			Next
			'store empty audience...
			list.SetItemData(clock, null)
		Next

		list.Show()
	End Method


	Method AudienceSim_RunAudienceSimulation:Int()
		local audience:int = Max(0, m_spinCtrl_audience.GetValue())
		local day:int = 1
		local hour:int = 1
		local year:int = m_spinCtrl_gameYear.GetValue()

		'adjust game time
'		print GetWorldTime().GetFormattedDay()
		GetWorldTime().SetStartYear(year)
'		GetWorldTime().SetTimeGone( GetWorldTime().MakeTime(year, day, hour. 0, 0) )
'		print GetWorldTime().GetFormattedDay() + "  " + GetWorldTime().GetYear()

		'create market ("buy a generic station")
		Local market:TAudienceMarketCalculation = New TAudienceMarketCalculation
		market.maxAudience = TAudience.CreateWithBreakdown(audience)
		for local player:int = 1 to 4
			market.AddPlayer(player)
		Next

		'broadcast any previous programme "before"
		Local bc:TBroadcast = new TBroadcast
		bc.AudienceMarkets.AddLast(market)
		bc.broadcastType = TVTBroadcastMaterialType.PROGRAMME

rem
		Local bcNews:TBroadcast = new TBroadcast
		bcNews.AudienceMarkets.AddLast(market)
		bcNews.broadcastType = TVTBroadcastMaterialType.NEWSSHOW

		For local i:int = 1 to block
			'set the block we send
			p.currentBlockBroadcasting = i

			local newsShow:TNewsShow = TNewsShow.Create("News", player, null, null, null)
			GetBroadcastManager().SetCurrentBroadcastMaterial(player, p, TVTBroadcastMaterialType.NEWSSHOW)
			GetBroadcastManager().BroadcastNewsShow(day, hour-i+1, 0)

			'broadcast it
			GetBroadcastManager().SetCurrentBroadcastMaterial(player, p, TVTBroadcastMaterialType.PROGRAMME)
			GetBroadcastManager().BroadcastProgramme(day, hour-i+1, 0, bc)
		Next
endrem
		'create programme for all players
		For local player:int = 1 to 4
			local licence:TProgrammeLicence = AudienceSim_activeProgrammeLicence[player -1]
			if licence
				local p:TProgramme = TProgramme.Create(licence)
				p.owner = player
				'set the block we send
				if player = 1
					p.currentBlockBroadcasting = Min(licence.GetData().GetBlocks(), Max(1, m_spinCtrl_block.GetValue()))
				else
					p.currentBlockBroadcasting = 1
				endif
				'set broadcast of this player
				GetBroadcastManager().SetCurrentBroadcastMaterial(player, p, TVTBroadcastMaterialType.PROGRAMME)
			else
				GetBroadcastManager().SetCurrentBroadcastMaterial(player, null, TVTBroadcastMaterialType.PROGRAMME)
			endif
		Next

		'broadcast all
		GetBroadcastManager().BroadcastProgramme(day, hour, 0, bc)

		'fetch audience for our player 1
		For local hour:int = 0 to 23
			GetBroadcastManager().BroadcastProgramme(day, hour, 0, bc)
			Local audienceResult:TAudienceResult = GetBroadcastManager().GetAudienceResult(1)
			'local potentialQuote:TAudience = audienceResult.GetAudienceQuote()

			'we assume all rows are created already

			For local i:int = 0 to TVTTargetGroup.count
				local s:string = int(audienceResult.audience.GetValue( TVTTargetGroup.GetAtIndex(i) ))
				's :+ " ("+ int(100*potentialQuote.GetValue( TVTTargetGroup.GetAtIndex(i) ))+"%)"
				m_listCtrl_audiences.SetStringItem(hour, i+1, s )
			Next

			'store audience result audience...
			local audienceResults:TAudienceResult[4]
			For local i:int = 1 to 4
				audienceResults[i-1] = GetBroadcastManager().GetAudienceResult(i)
			Next
			
			m_listCtrl_audiences.SetItemData(hour, audienceResults)
		Next

		AudienceSim_RefreshSummary()
	End Method



	Method AudienceSim_RefreshSummary()
		local hour:int = AudienceSim_activeAudienceHour
		if hour < 0 or hour > 23 then return

		'fetch audience result audience...
		local audienceResults:TAudienceResult[] = TAudienceResult[](m_listCtrl_audiences.GetItemData(hour))
		if not audienceResults or audienceResults.length < 4 then return

		local summary:string = "Quoten "+hour+" Uhr: "
		For local player:int = 1 to 4
			summary :+ "Sender #"+player+": "+int(audienceResults[player - 1].audience.GetSum())

			if player < 4 then summary :+ "  |  "
		Next

		m_staticText_AudienceSim_audienceSummary.SetLabel(summary)
	End Method
	


	Method SetStatusBarText(text:string)
		m_statusBar1.SetStatusText(text)
	End Method
	

	'ther "item" is the "GetData()"-data stored in the wxListItem! 
	Function SortProgrammeLicences:Int(item1:Object, item2:Object, data:Object)
		local l1:TProgrammeLicence = TProgrammeLicence(item1)
		local l2:TProgrammeLicence = TProgrammeLicence(item2)
		if not l1 then return 1
		if not l2 then return -1

		local d:TData = TData(data)
		local sort:string = "name"
		local direction:int = 0
		if d
			sort = d.GetString("sort", sort)
			direction = d.GetInt("direction", direction)
		endif

		local before:int = -1, after:int = 1
		'switch direction?
		if direction = 1 then before=1;after=-1


		'for same year numbers, use title-sort
		if sort.ToLower() = "year"
			if l1.GetData().year = l2.GetData().year then sort="name"
		endif

		
		Select sort.ToLower()
			case "title"
				'one is parent of the other?
				if l2 = l1.GetParentLicence()
					return before
				elseif l1 = l2.GetParentLicence()
					return after
				endif
				'episodes of the same series?
				if l1.parentLicenceGUID <> "" and l1.parentLicenceGUID = l2.parentLicenceGUID
					if l1.GetEpisodeNumber() > l2.GetEpisodeNumber()				
						return before
					else
						return after
					endif
				else
					'if the "own name" (single) or "series name" (episodes)
					'differ - order by them
					if l1.GetParentLicence().GetTitle() > l2.GetParentLicence().GetTitle()
						return before
					else
						return after
					endif
				endif
			'case "year"
			default 'by year
				'no need to check "=" (is done already above)
				if l1.GetData().year < l2.GetData().year
					return before
				else
					return after
				endif
		End Select
		return 0
	End Function


	Method ResizeProgrammeLicenceCastList()
		if m_listCtrl_programmeLicenceCast.GetColumnCount() >= 2
			local w:int, h:int
			m_listCtrl_programmeLicenceCast.GetClientSize(w, h)
			m_listCtrl_programmeLicenceCast.SetColumnWidth(0, w - 120)
			m_listCtrl_programmeLicenceCast.SetColumnWidth(1, 120)
		endif
	End Method


	Method RecreateProgrammeLicenceCastList()
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		list.ClearAll()
		list.InsertColumn(0, "Name")
		list.InsertColumn(1, "Job", wxLIST_FORMAT_RIGHT)

		ResizeProgrammeLicenceCastList()
	End Method


	Method ResizeProgrammeLicenceList(list:wxListCtrl)
		if list.GetColumnCount() >= 4
			local w:int, h:int
			list.GetClientSize(w, h)
			local wLeft:int = w - 80 - 80 - 100 - 20 '-20 is margin etc
			list.SetColumnWidth(0, wLeft)
			list.SetColumnWidth(1, 80)
			list.SetColumnWidth(2, 80)
			list.SetColumnWidth(3, 100)
'			print w
			'TODO: On Maximize followed by Minimize the "onSize" is not
			'      called
		endif
	End Method
	

	Method RecreateProgrammeLicenceList(list:wxListCtrl)
		list.DeleteAllItems()
		list.InsertColumn(0, programmeLicenceListColNames[0])
		list.InsertColumn(1, programmeLicenceListColNames[1], wxLIST_FORMAT_RIGHT)
		list.InsertColumn(2, programmeLicenceListColNames[2], wxLIST_FORMAT_RIGHT)
		list.InsertColumn(3, programmeLicenceListColNames[3], wxLIST_FORMAT_RIGHT)
		' To speed up inserting we hide the control temporarily
		list.Hide()

		local entryNum:int = 0
		For Local l:TProgrammeLicence = EachIn GetProgrammeLicenceCollection().licences
			if l.isEpisode()
				list.InsertStringItem(entryNum, "- "+l.GetTitle())
			else
				list.InsertStringItem(entryNum, l.GetTitle())
			endif
			list.SetStringItem(entryNum, 1, l.GetData().year )
			list.SetStringItem(entryNum, 2, TVTProgrammeLicenceType.GetAsString(l.licenceType) )
'RONNY
'			list.SetStringItem(entryNum, 3, l.GetData().createdBy )
			list.SetStringItem(entryNum, 3, "ronny" )
			'maybe we could just store the GUID here?
			'or something which does NOT change at all? 
			list.SetItemData(entryNum, l)

			entryNum :+ 1
		Next

		list.Show()
	End Method


	Method FillProgrammeLicenceForm:Int(licence:TProgrammeLicence)
		'text
		'TODO: fill "language box" with available languages
		'TODO: set current language as selected one
		'TODO: fill "language specific data" (of selected lang)
		m_textCtrl_programmeLicenceTitle.SetValue(licence.GetTitle())
		'meta data... or unneeded
		'm_textCtrl_programmeLicenceOriginalTitle.SetValue(licence.GetData().GetOriginalTitle())
		m_textCtrl_programmeLicenceOriginalTitle.SetValue("")
		m_textCtrl_programmeLicenceDescription.SetValue(licence.GetDescription())

		'ratings
		m_textCtrl_programmeLicenceOutcome.SetValue( FloatToPercentageString( licence.GetData().GetOutcome() * 100.0 ) )
		m_textCtrl_programmeLicenceSpeed.SetValue( FloatToPercentageString( licence.GetData().GetSpeed() * 100.0 ) )
		m_textCtrl_programmeLicenceReview.SetValue( FloatToPercentageString( licence.GetData().GetReview() * 100.0 ) )

		'base data
		m_pgItem_programmeLicenceBlocks.SetValueInt( licence.GetData().GetBlocks() )
		m_pgItem_programmeLicenceYear.SetValueInt( licence.GetData().year )
		m_pgItem_programmeLicenceCountry.SetValueString( licence.GetData().country )

		m_pgItem_programmeLicenceMainGenre.SetChoiceSelection( licence.GetData().genre + 1 )

		'transfer "genres" to "array indizes"
		local subGenres:int[]
		local s:string
		For local i:int = EachIn licence.GetData().subGenres
			subGenres :+ [i-1]
			s :+ (i-1)+","
		Next
		m_pgItem_programmeLicenceSubGenres.SetValueIntArray(subGenres)

		'get
		'm_pgItem_programmeLicenceMainGenre.GetChoiceSelection()

		'remove "modified"-state from all
		'item.SetWasModified(false)

		m_pgItem_programmeLicenceGUID.SetValueString( licence.GetGUID() )



		'flags
		For local i:int = 1 to TVTProgrammeDataFlag.count
			local flag:int = TVTProgrammeDataFlag.GetAtIndex(i)
			m_checkList_programmeLicenceFlags.Check( i - 1, licence.GetData().HasFlag(flag) )
		Next

		'cast
		RecreateProgrammeLicenceCastList()
		ProgrammeLicence_AddCast( licence.GetData().GetCast() )
		
		'author data
'RONNY
'		m_pgItem_programmeLicenceCreator.SetValueInt( licence.GetData().creator )
'		m_pgItem_programmeLicenceCreatedBy.SetValueString( licence.GetData().createdBy )
		m_pgItem_programmeLicenceCreator.SetValueInt( 0 )
		m_pgItem_programmeLicenceCreatedBy.SetValueString( "ronny" )
	End Method


	Method ProgrammeLicence_AddCast:int(jobs:TProgrammePersonJob[])
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		local jobNum:int = list.GetItemCount()
		For local j:TProgrammePersonJob = EachIn jobs
			'skip existing ones?
'			if ProgrammeLicences_activeProgrammeLicence.GetData().HasCast(j) then continue

			ProgrammeLicences_activeProgrammeLicence.GetData().AddCast(j)

			list.InsertStringItem(jobNum, GetProgrammePersonBase(j.personGUID).GetFullName())
			list.SetStringItem(jobNum, 1, GetLocale("MOVIE_" + TVTProgrammePersonJob.GetAsString(j.job) ) )
			list.SetItemData(jobNum, j)


			jobNum :+ 1
		Next
	End Method


	Method ProgrammeLicence_SwitchCast:int(jobLineA:int, jobLineB:int)
		local list:wxListCtrl = m_listCtrl_programmeLicenceCast
		local jobA:TProgrammePersonJob = TProgrammePersonJob(list.GetItemData(jobLineA))
		local jobB:TProgrammePersonJob = TProgrammePersonJob(list.GetItemData(jobLineB))

		list.SetStringItem(jobLineB, 0, GetProgrammePersonBase(jobA.personGUID).GetFullName())
		list.SetStringItem(jobLineB, 1, GetLocale("MOVIE_" + TVTProgrammePersonJob.GetAsString(jobA.job) ) )
		list.SetItemData(jobLineB, jobA)

		list.SetStringItem(jobLineA, 0, GetProgrammePersonBase(jobB.personGUID).GetFullName())
		list.SetStringItem(jobLineA, 1, GetLocale("MOVIE_" + TVTProgrammePersonJob.GetAsString(jobB.job) ) )
		list.SetItemData(jobLineA, jobB)

		'switch in licence too
		ProgrammeLicences_activeProgrammeLicence.GetData().cast[jobLineB] = jobA
		ProgrammeLicences_activeProgrammeLicence.GetData().cast[jobLineA] = jobB
	End Method


	Method ProgrammeLicence_ClearCast:int()
		'TODO: remove from "TProgrammeData"
	
		RecreateProgrammeLicenceCastList()
	End Method
rem
	'when an entry in the licences-list is selected
	Method OnProgrammeLicenceLicencesChange(event:wxTreeEvent)
		local treeItem:wxTreeItemId = event.GetItem()
		local tree:wxTreeCtrl = m_treeCtrl_programmeLicences
		local data:TData = TData(tree.GetItemData(treeItem))
		if not data then print "no data"

		print "onchange to guid:"+data.GetString("GUID")
	End Method
endrem


	Function FloatToPercentageString:String(f:Float)
		local value:String = string(f).Replace(",",".")
		value = Left(value, 4)
		if value[2..] = ".0" then value = Left(value, 2)
		if len(value) > 3 and value[(len(value)-3)..] = ".00" then value = int(value)
		if value = "0.00" then value = "0"
		if value = "100." then value = "100"
		return value
	End Function
End Type




Type DialogSelectCast Extends DialogSelectCastBase
	Field listSortBy:string
	Field listSortDirection:int = -1
	Field colNames:string[] = ["Name", "Original", "Real/Fictive"]


	Method OnInit()
		Super.OnInit()

		'=== LIST ===
		local list:wxListCtrl = m_listCtrl_SelectCastPersonList
		list.DeleteAllItems()
		list.InsertColumn(0, colNames[0])
		list.InsertColumn(1, colNames[1])
		list.InsertColumn(2, colNames[2])
		
		' To speed up inserting we hide the control temporarily
		list.Hide()

		local entryNum:int = 0
		For Local p:TProgrammePersonBase = EachIn GetProgrammePersonBaseCollection().celebrities.Values()
			list.InsertStringItem(entryNum, p.GetLastName()+", "+p.GetFirstName())
			list.SetStringItem(entryNum, 1, "" )
			if p.fictional
				list.SetStringItem(entryNum, 2, "fictional" )
			else
				list.SetStringItem(entryNum, 2, "real" )
			endif
			'maybe we could just store the GUID here?
			'or something which does NOT change at all? 
			list.SetItemData(entryNum, p)

			entryNum :+ 1
		Next

		list.SetColumnWidth(0, 200)
		list.SetColumnWidth(1, 200)
		list.SetColumnWidth(2, 80)
		
		list.Show()


		'=== JOB CHOICE ===
		m_choice_job.Clear()
		For local i:int = 1 to TVTProgrammePersonJob.count
			local key:int = TVTProgrammePersonJob.GetAtIndex(i)
			m_choice_job.Append( GetLocale("MOVIE_" + TVTProgrammePersonJob.GetAsString(key)), new TData.AddNumber("jobKey", key) )
		Next
	End Method


	Method OnListColClick(event:wxListEvent)
		Local col:Int = wxListEvent(event).GetColumn()
		Local item:wxListItem = wxListEvent(event).GetItem()
		local list:wxListCtrl = m_listCtrl_SelectCastPersonList
		local oldListSortBy:string = listSortBy
		if col < 0 and col > 2 then return 

		if col = 0
			listSortBy = "name"
		elseif col = 1
			listSortBy = "original"
		else
			listSortBy = "type"
		endif

		if listSortBy = oldListsortBy
			listSortDirection = not listSortDirection
		else
			listSortDirection = 0
		endif
'		print "sort by: "+listSortBy+"  direction: "+listSortDirection


		local i:wxListItem = wxListItem.CreateListItem()
		for local myCol:int = 0 to 2
			'store current column-header in "i"
			list.GetColumn(myCol, i)

			if myCol = col
				if listSortDirection = 0
					'item.SetMask(wxLIST_MASK_IMAGE)
					'item.SetImage(image)
					i.SetText(colNames[col] + " [A..Z]")
				else
					i.SetText(colNames[col] + " [Z..A]")
				endif
			else
				'reset all other columns
				i.SetText(colNames[myCol])
			endif

			list.SetColumn(myCol, i)
		Next

		list.SortItems(SortPersons, New TData.AddString("sort", listSortBy).AddNumber("direction", listSortDirection))
	End Method



	Method OnSelectCast(event:wxCommandEvent)
rem
		local list:wxListCtrl = m_listCtrl_SelectCastPersonList

		'nothing selected
		if list.GetSelectedItemCount() <= 0 then return 'do nothing
		
		'get first selected item
		Local item:Int = -1
		item = list.GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED)
		if item = -1 then return 'do nothing


		local person:TProgrammePersonBase = TProgrammePersonBase( list.GetItemData(item) )
		if not person
			'failed
			EndModal(-1)
			return
		endif


		'TODO: jobID als Data in DropDown hinterlegen
		local selectedJob:int = m_choice_job.GetSelection()
		if selectedJob = wxNOT_FOUND then return 'do nothing

		local jobData:TData = TData(m_choice_job.GetItemClientData(selectedJob))
		if not jobData then return 'failed

		local jobKey:int = jobData.GetInt("jobKey", TVTProgrammePersonJob.UNKNOWN)

		local job:TProgrammePersonJob = New TProgrammePersonJob.Init(person.GetGUID(), jobKey)
		app._frameMain.ProgrammeLicence_AddCast([job])
		
		'close dialogue
		EndModal(1)
endrem
	End Method




	'ther "item" is the "GetData()"-data stored in the wxListItem! 
	Function SortPersons:Int(item1:Object, item2:Object, data:Object)
		local p1:TProgrammePersonBase = TProgrammePersonBase(item1)
		local p2:TProgrammePersonBase = TProgrammePersonBase(item2)
		if not p1 then return 1
		if not p2 then return -1

		local d:TData = TData(data)
		local sort:string = "name"
		local direction:int = 0
		if d
			sort = d.GetString("sort", sort)
			direction = d.GetInt("direction", direction)
		endif

		local before:int = -1, after:int = 1
		'switch direction?
		if direction = 1 then before=1;after=-1

		
		Select sort.ToLower()
			case "type"
				'sort by type and then name
				'TODO
				local n1:string = p1.GetLastName()+", "+p1.GetFirstName() 
				local n2:string = p2.GetLastName()+", "+p2.GetFirstName()
				if p1.fictional = p2.fictional
					if n1 < n2
						return before
					elseif n1 > n2
						return after
					endif
				else
					if p1.fictional and not p2.fictional
						return before
					else
						return after
					endif
				endif
			case "original"
				'TODO
				local n1:string = p1.GetLastName()+", "+p1.GetFirstName() 
				local n2:string = p2.GetLastName()+", "+p2.GetFirstName() 
				if n1 < n2
					return before
				elseif n1 > n2
					return after
				endif
			default 'by name
				local n1:string = p1.GetLastName()+", "+p1.GetFirstName() 
				local n2:string = p2.GetLastName()+", "+p2.GetFirstName() 
				if n1 < n2
					return before
				elseif n1 > n2
					return after
				endif
		End Select
		return 0
	End Function
End Type





Type TEditorDatabaseLoader Extends TDatabaseLoader
	Global currentDoc:TxmlDoc

	'override to append origin
	Method LoadV3CreatorMetaDataFromNode:TData(GUID:string, data:TData, node:TxmlNode, xml:TXmlHelper)
		data = Super.LoadV3CreatorMetaDataFromNode(GUID, data, node, xml)

		data.AddString("currentFileURI", config.GetString("currentFileURI"))
		'not needed
		'check if there is meta data for this entry, if yes, this is an
		'overridden entry
		'local meta:TData = GetMetaDataCollection().GetByGUID(GUID)
		'data.AddNumber("original", meta = null)

		return data
	End Method


	'shared functionality for objects having movie-DB-relationships
	'(Licences, Celebrities, insignificant people)
	Function _LoadV3MovieDBMetaData:TData(node:TXmlNode, data:TData)
		'load IDs for various online DBs and fall back to "original" ID
		'for extended/overridden objects
		local metaStrings:string[] = ["tmdb_id", "imdb_id", "rt_id"]
		For local m:string = EachIn metaStrings
			local id:string = TXmlHelper.FindValue(node, m, data.GetString(m, "").Trim())
			if id and id <> "0" then data.AddString(m, id)
		Next
		return data
	End Function


	Function ReplaceUmlauts:string(text:string)
		text = text.Replace("Ä", "Ae").Replace("ä", "ae")
		text = text.Replace("Ö", "Oe").Replace("ö", "oe")
		text = text.Replace("Ü", "Ue").Replace("ü", "ue")
		text = text.Replace("ß", "ss")
		return text
	End Function



	'=== EXTEND META DATA FUNCTIONS ===
	Method LoadV3ProgrammeRoleMetaDataFromNode:TData(GUID:string, node:TxmlNode, xml:TXmlHelper)
		local data:TData = Super.LoadV3ProgrammeRoleMetaDataFromNode(GUID, node, xml)
		'add meta data to be globally available
		GetMetaDataCollection().Add(GUID, data)
		
		return data
	End Method


	Method LoadV3ScriptTemplateMetaDataFromNode:TData(GUID:string, node:TxmlNode, xml:TXmlHelper, parentScriptTemplate:TScriptTemplate = Null)
		local data:TData = Super.LoadV3ScriptTemplateMetaDataFromNode(GUID, node, xml)
		'add meta data to be globally available
		GetMetaDataCollection().Add(GUID, data)
		
		return data
	End Method


	Method LoadV3ProgrammeLicenceMetaDataFromNode:TData(GUID:string, node:TxmlNode, xml:TXmlHelper, parentLicence:TProgrammeLicence = Null)
		local data:TData = Super.LoadV3ProgrammeLicenceMetaDataFromNode(GUID, node, xml, parentLicence)

		'load movie db IDs
		_LoadV3MovieDBMetaData(node, data)

		'add meta data to be globally available
		GetMetaDataCollection().Add(GUID, data)
		
		return data
	End Method


	Method LoadV3ProgrammePersonBaseMetaDataFromNode:TData(GUID:string, node:TxmlNode, xml:TXmlHelper, isCelebrity:int=True)
		local data:TData = Super.LoadV3ProgrammePersonBaseMetaDataFromNode(GUID, node, xml, isCelebrity)

		'load movie db IDs
		_LoadV3MovieDBMetaData(node, data)

		'add meta data to be globally available
		GetMetaDataCollection().Add(GUID, data)
		
		return data
	End Method


	Method LoadV3NewsEventMetaDataFromNode:TData(GUID:string, node:TxmlNode, xml:TXmlHelper)
		local data:TData = Super.LoadV3NewsEventMetaDataFromNode(GUID, node, xml)
		'add meta data to be globally available
		GetMetaDataCollection().Add(GUID, data)
		
		return data
	End Method


	Method LoadV3AdContractBaseMetaDataFromNode:TData(GUID:string, node:TxmlNode, xml:TXmlHelper)
		local data:TData = Super.LoadV3AdContractBaseMetaDataFromNode(GUID, node, xml)
		'add meta data to be globally available
		GetMetaDataCollection().Add(GUID, data)
		
		return data
	End Method



	'=== SAVE FUNCTIONS ===
	Method Save(fileURI:string)
		SaveV3(fileURI)
	End Method



	Method SaveV3(fileURI:string)
		currentDoc = TxmlDoc.NewDoc("1.0")
		Local root:TxmlNode = TxmlNode.Newnode("tvgdb")
		currentDoc.SetEncoding("utf-8")
		currentDoc.SetRootElement(root)

		local nodeList:TList = CreateList()
		local nodeGroup:TxmlNode
		local node:TXmlNode



		'=== COMMENT + OPTIONS ===
		'alternative option to add a new node
		'local versionNode:TxmlNode = root.AddChild("version")
		node = TxmlNode.Newnode("version")
		node.setAttribute("value", "3")
		node.setAttribute("comment", "editor export")
		node.setAttribute("exportDate", "2015-01-01 23:00:00")
		nodeList.AddLast(node)

		node = TxmlNode.Newnode("exportOptions")
		node.setAttribute("onlyFakes", "true")
		node.setAttribute("onlyCustom", "false")
		node.setAttribute("dataStructure", "FakeData")
		nodeList.AddLast(node)



		'=== PROGRAMME LICENCES ===
		nodeGroup = TxmlNode.Newnode("allprogrammes")
		SaveV3ProgrammeLicences(nodeGroup)
		nodeList.AddLast(nodeGroup)


		

		'=== CELEBRITY PEOPLE ===
		nodeGroup = TxmlNode.Newnode("celebritypeople")
		For local p:TProgrammePerson = EachIn GetProgrammePersonBaseCollection().celebrities.Values()
			SaveV3ProgrammePerson(nodeGroup, p)
		Next
		nodeList.AddLast(nodeGroup)



		'=== INSIGNIFICANT PEOPLE ===
		nodeGroup = TxmlNode.Newnode("insignificantpeople")
		For local p:TProgrammePerson = EachIn GetProgrammePersonBaseCollection().insignificant.Values()
			SaveV3ProgrammePersonBase(nodeGroup, p)
		Next
		nodeList.AddLast(nodeGroup)



		'=== AD CONTRACTS ===
		nodeGroup = TxmlNode.Newnode("allads")
		For local p:TAdContractBase = EachIn GetAdContractBaseCollection().entries.Values()
			SaveV3AdContractBase(nodeGroup, p)
		Next
		nodeList.AddLast(nodeGroup)



		'=== NEWS EVENTS ===
		nodeGroup = TxmlNode.Newnode("allnews")
		nodeList.AddLast(nodeGroup)



		'=== SCRIPTS: SCRIPT TEMPLATES ===
		nodeGroup = TxmlNode.Newnode("scripttemplates")
		nodeList.AddLast(nodeGroup)



		'=== SCRIPTS: PROGRAMME ROLES ===
		nodeGroup = TxmlNode.Newnode("programmeroles")
		nodeList.AddLast(nodeGroup)


		'add all children to "tvgdb"
		root.addChildList(nodeList)

'		print currentDoc.ToStringFormat(True)
		currentDoc.SaveFormatFile("db_export.xml",True,"utf-8")
	End Method


	Method SaveBasicCreatorMetaData:int(node:TXmlNode, GUID:string, parentGUID:string="")
		local metaData:TData = GetMetaDataCollection().GetByGUID(GUID)
		if not metaData then return false

		local parentMetaData:TData
		if parentGUID then parentMetaData = GetMetaDataCollection().GetByGUID(parentGUID)
		if not parentMetaData then parentMetaData = new TData

		if metaData.GetInt("creator") and metaData.GetInt("creator") <> parentMetaData.GetInt("creator")
			node.setAttribute("creator", metaData.GetInt("creator", 0))
		endif
		if metaData.GetString("createdBy") <> "" and metaData.GetString("createdBy") <> parentMetaData.GetString("createdBy")
			node.setAttribute("created_by", ReplaceUmlauts(metaData.GetString("createdBy", "")))
		endif

'		if metaData.GetString("currentFileURI") <> "" and metaData.GetString("currentFileURI") <> "res/database/Default/database.xml"
'			node.setAttribute("currentFileURI", metaData.GetString("currentFileURI", "").Replace("res/database/", ""))
'		endif

		return True
	End Method


	Method SaveBasicMovieDBMetaData:int(node:TXmlNode, GUID:string, parentGUID:string="")
		local metaData:TData = GetMetaDataCollection().GetByGUID(GUID)
		if not metaData then return false

		local parentMetaData:TData
		if parentGUID then parentMetaData = GetMetaDataCollection().GetByGUID(parentGUID)
		if not parentMetaData then parentMetaData = new TData


		if metaData.GetString("tmdb_id") <> "" and metaData.GetString("tmdb_id") <> parentMetaData.GetString("tmdb_id")
			node.setAttribute("tmdb_id", metaData.GetString("tmdb_id", ""))
		endif
		if metaData.GetString("imdb_id") <> "" and metaData.GetString("imdb_id") <> parentMetaData.GetString("imdb_id")
			node.setAttribute("imdb_id", metaData.GetString("imdb_id", ""))
		endif
		if metaData.GetString("rt_id") <> "" and metaData.GetString("rt_id") <> parentMetaData.GetString("rt_id")
			node.setAttribute("rt_id", metaData.GetString("rt_id", ""))
		endif

		SaveBasicCreatorMetaData(node, GUID, parentGUID)

		return True
	End Method


	Method SaveV3ProgrammePersonBase:TXmlNode(groupNode:TXmlNode, person:TProgrammePerson)
		local node:TxmlNode = groupNode.AddChild("person")
		node.setAttribute("id", person.GetGUID())
		if person.firstName <> "" then node.setAttribute("first_name", person.firstName)
		if person.lastName <> "" then node.setAttribute("last_name", person.lastName)
		if person.nickName <> "" then node.setAttribute("nick_name", person.nickName)
		if person.fictional then node.setAttribute("fictional", person.fictional)
		if person.canLevelUp then node.setAttribute("levelup", person.canLevelUp)
		if person.job then node.setAttribute("job", person.job)

		SaveBasicMovieDBMetaData(node, person.GetGUID())

		return node
	End Method


	Method SaveV3ProgrammePerson:int(groupNode:TXmlNode, person:TProgrammePerson)
		'save basic values (similar to TProgrammePersonBase)
		local node:TXmlNode = SaveV3ProgrammePersonBase(groupNode, person)

		'empty for now
		'node.AddChild("images")

		'"biography data"
		local detailsNode:TXmlNode = node.AddChild("details")

		if person.gender > 0 then detailsNode.setAttribute("gender", person.gender)
		if person.dayOfBirth <> "0000-00-00" then detailsNode.setAttribute("birthday", person.dayOfBirth)
		if person.dayOfDeath <> "0000-00-00" then detailsNode.setAttribute("deathday", person.dayOfDeath)
		if person.country <> "" then detailsNode.setAttribute("country", person.country)

		local dataNode:TXmlNode = node.AddChild("data")
		if person.skill > 0 then dataNode.setAttribute("skill", MathHelper.NumberToString(person.skill*100,2, TRUE))
		if person.fame > 0 then dataNode.setAttribute("fame", MathHelper.NumberToString(person.fame*100,2, TRUE))
		if person.scandalizing > 0 then dataNode.setAttribute("scandalizing", MathHelper.NumberToString(person.scandalizing*100,2, TRUE))
		if MathHelper.NumberToString(person.priceModifier*100, 2, True) <> "1"
			dataNode.setAttribute("price_mod", MathHelper.NumberToString(person.priceModifier*100, 2, True))
		endif
		if person.power > 0 then dataNode.setAttribute("power", MathHelper.NumberToString(person.power*100,2, TRUE))
		if person.humor > 0 then dataNode.setAttribute("humor", MathHelper.NumberToString(person.humor*100,2, TRUE))
		if person.charisma > 0 then dataNode.setAttribute("charisma", MathHelper.NumberToString(person.charisma*100,2, TRUE))
		if person.appearance > 0 then dataNode.setAttribute("appearance", MathHelper.NumberToString(person.appearance*100,2, TRUE))

		if person.topGenre1 then dataNode.setAttribute("topgenre1", person.topGenre1)
		if person.topGenre2 then dataNode.setAttribute("topgenre2", person.topGenre2)
	End Method
	

	Method SaveV3AdContractBase:int(groupNode:TXmlNode, adContract:TAdContractBase)
		local node:TXmlNode = groupNode.AddChild("ad")

		node.setAttribute("id", ReplaceUmlauts(adContract.GetGUID()))
		SaveBasicCreatorMetaData(node, adContract.GetGUID(), "")

		SaveLocalizedString(node, "title", adContract.title)
		SaveLocalizedString(node, "description", adContract.description)


		'<availability>-block
		if adContract.availableYearRangeFrom <> -1 or ..
		   adContract.availableYearRangeTo <> -1 or ..
		   adContract.availableScript
		   
			local availabilityNode:TXmlNode = node.AddChild("availability")
			if adContract.availableScript then availabilityNode.setAttribute("script", adContract.availableScript)
			if adContract.availableYearRangeFrom <> -1 then availabilityNode.setAttribute("year_range_from", adContract.availableYearRangeFrom)
			if adContract.availableYearRangeTo <> -1 then availabilityNode.setAttribute("year_range_to", adContract.availableYearRangeTo)
		endif
		

		'<conditions>-block
		local conditionsNode:TXmlNode = node.AddChild("conditions")
		'if adContract.minAudienceBase > 0 then
		conditionsNode.setAttribute("min_audience", MathHelper.NumberToString(adContract.minAudienceBase*100,2, TRUE))
		conditionsNode.setAttribute("min_image", MathHelper.NumberToString(adContract.minImage*100,2, TRUE))

		if adContract.limitedToTargetGroup <> -1 then conditionsNode.setAttribute("target_group", adContract.limitedToTargetGroup)
		if adContract.limitedToProgrammeGenre <> -1 then conditionsNode.setAttribute("allowed_genre", adContract.limitedToProgrammeGenre)
		if adContract.limitedToProgrammeFlag <> -1 then conditionsNode.setAttribute("allowed_programme_flag", adContract.limitedToProgrammeFlag)
		if adContract.limitedToProgrammeType <> -1 then conditionsNode.setAttribute("allowed_programme_type", adContract.limitedToProgrammeType)
		if adContract.forbiddenProgrammeGenre <> -1 then conditionsNode.setAttribute("prohibited_genre", adContract.forbiddenProgrammeGenre)
		if adContract.forbiddenProgrammeFlag <> -1 then conditionsNode.setAttribute("prohibited_programme_flag", adContract.forbiddenProgrammeFlag)
		if adContract.forbiddenProgrammeType <> -1 then conditionsNode.setAttribute("prohibited_programme_type", adContract.forbiddenProgrammeType)

		if adContract.proPressureGroups <> -1 then conditionsNode.setAttribute("pro_pressure_groups", adContract.proPressureGroups)
		if adContract.contraPressureGroups <> -1 then conditionsNode.setAttribute("contra_pressure_groups", adContract.contraPressureGroups)


		'<data>-block
		local dataNode:TXmlNode = node.AddChild("data")
		if adContract.infomercialAllowed > 0 then dataNode.setAttribute("infomercial", adContract.infomercialAllowed)
		if adContract.quality > 0 then dataNode.setAttribute("quality", MathHelper.NumberToString(adContract.quality*100, 2, TRUE))

		if adContract.spotCount <> -1 then dataNode.setAttribute("repetitions", adContract.spotCount)
		if adContract.daysToFinish <> 0 then dataNode.setAttribute("duration", adContract.daysToFinish)
		if adContract.fixedPrice then dataNode.setAttribute("fix_price", adContract.fixedPrice)

		if adContract.profitBase > 0 then dataNode.setAttribute("profit", MathHelper.NumberToString(adContract.profitBase,4, TRUE))
		if adContract.penaltyBase > 0 then dataNode.setAttribute("penalty", MathHelper.NumberToString(adContract.penaltyBase,4, TRUE))

		'if value differs to 10% of profitBase (default value)
		if MathHelper.NumberToString(adContract.infomercialProfitBase,2,True) <> MathHelper.NumberToString(0.1*adContract.profitBase,2,True)
			dataNode.setAttribute("infomercial_profit", adContract.infomercialProfitBase)
		endif
		if adContract.fixedInfomercialProfit then dataNode.setAttribute("fix_infomercial_profit", adContract.fixedInfomercialProfit)
	End Method
	

	Method SaveV3ProgrammeLicences:int(groupNode:TXmlNode)
		local licenceTypes:int[] = [TVTProgrammeLicenceType.SINGLE, TVTProgrammeLicenceType.SERIES, TVTProgrammeLicenceType.COLLECTION]
		For local licenceType:int = EachIn licenceTypes
			local list:TList = GetProgrammeLicenceCollection()._GetList(licenceType)
			local subNode:TXmlNode

			For local licence:TProgrammeLicence = EachIn list
				SaveV3ProgrammeLicence(groupNode, licence)
			Next
		Next
	End Method


	Method SaveV3ProgrammeLicence:int(groupNode:TXmlNode, licence:TProgrammeLicence)
		local parentLicence:TProgrammeLicence
		if licence.parentLicenceGUID then parentLicence = GetProgrammeLicenceCollection().GetByGUID(licence.parentLicenceGUID)

		local node:TxmlNode = groupNode.AddChild("programme")
		'licence has the GUID given in the original database,
		'_not_ TProgrammeData
		node.setAttribute("id", licence.GetGUID())
		if not parentLicence or (licence.GetData().productType <> parentLicence.GetData().productType)
			node.setAttribute("product", licence.GetData().productType)
		endif
		if not parentLicence or (licence.licenceType <> parentLicence.licenceType)
			node.setAttribute("licence_type", licence.licenceType)
		endif

		local parentLicenceGUID:string = ""
		if parentLicence then parentLicenceGUID = parentLicence.GetGUID()
		SaveBasicMovieDBMetaData(node, licence.GetGUID(), parentLicenceGUID)

		SaveLocalizedString(node, "title", licence.GetData().title)
		SaveLocalizedString(node, "description", licence.GetData().description)



		'<groups>
		if licence.GetData().targetGroups or licence.GetData().proPressureGroups or licence.GetData().contraPressureGroups
			local groupsNode:TXmlNode = node.AddChild("groups")
			if licence.GetData().targetGroups then groupsNode.setAttribute("target_groups", licence.GetData().targetGroups)
			if licence.GetData().proPressureGroups then groupsNode.setAttribute("pro_pressure_groups", licence.GetData().proPressureGroups)
			if licence.GetData().contraPressureGroups then groupsNode.setAttribute("contra_pressure_groups", licence.GetData().contraPressureGroups)
		endif



		'<data>
		local dataNode:TXmlNode = node.AddChild("data")
		local subGenres:string = StringHelper.IntArrayToString(licence.GetData().subGenres, ",")
		local priceMod:string = MathHelper.NumberToString(Float(licence.GetData().GetModifier("price")), 4, True)

		local parentSubGenres:string = ""
		local parentPriceMod:string = ""
		if parentLicence
			parentSubGenres = StringHelper.IntArrayToString(parentLicence.GetData().subGenres, ",")
			parentPriceMod = MathHelper.NumberToString(Float(parentLicence.GetData().GetModifier("price")), 4, True)
		endif

		if not parentLicence or (licence.GetData().country <> parentLicence.GetData().country)
			dataNode.setAttribute("country", licence.GetData().country)
		endif
		if not parentLicence or (licence.GetData().year <> parentLicence.GetData().year)
			dataNode.setAttribute("year", licence.GetData().year)
		endif
		if not parentLicence or (licence.GetData().distributionChannel <> parentLicence.GetData().distributionChannel)
			dataNode.setAttribute("distribution", licence.GetData().distributionChannel)
		endif
		if not parentLicence or (licence.GetData().genre <> parentLicence.GetData().genre)
			dataNode.setAttribute("maingenre", licence.GetData().genre)
		endif
		if not parentLicence or (licence.GetData().flags <> parentLicence.GetData().flags)
			if licence.GetData().flags then dataNode.setAttribute("flags", licence.GetData().flags)
		endif
		if not parentLicence or (licence.GetData().blocks <> parentLicence.GetData().blocks)
			dataNode.setAttribute("blocks", licence.GetData().blocks)
		endif
		if not parentLicence or (licence.GetData().liveTime <> parentLicence.GetData().liveTime)
			if licence.GetData().liveTime > 0 then dataNode.setAttribute("time", licence.GetData().liveTime)
		endif

		if not parentLicence or (subGenres <> parentSubGenres)
			if subGenres then dataNode.setAttribute("subgenre", subGenres)
		endif
		if not parentLicence or (priceMod <> parentPriceMod)
			if float(priceMod) <> 1.0 then dataNode.setAttribute("price_mod", priceMod)
		endif



		'<staff>
		local addStaff:int = (not parentLicence) or (parentLicence.GetData().GetCastGroupString(0) <> licence.GetData().GetCastGroupString(0))
		if addStaff
			local staffNode:TXmlNode = node.AddChild("staff")
			local index:int = 0
			for local job:TProgrammePersonJob = Eachin licence.GetData().GetCast()
				local jobNode:TXmlNode = staffNode.AddChild("member")
				jobNode.setAttribute("index", index)
				jobNode.setAttribute("function", job.job)
				jobNode.setContent(job.personGUID)

				index :+1
			Next
		endif
			

			
		'<ratings>
		'convert percentages from 0-1.0 to 0-100.00
		local ratingsNode:TXmlNode = node.AddChild("ratings")
		if not parentLicence or (licence.GetData().review <> parentLicence.GetData().review)
			ratingsNode.setAttribute("critics", MathHelper.NumberToString(licence.GetData().review * 100, 2, True))
		endif
		if not parentLicence or (licence.GetData().speed <> parentLicence.GetData().speed)
			ratingsNode.setAttribute("speed", MathHelper.NumberToString(licence.GetData().speed * 100, 2, True))
		endif
		if not parentLicence or (licence.GetData().outcome <> parentLicence.GetData().outcome)
			ratingsNode.setAttribute("outcome", MathHelper.NumberToString(licence.GetData().outcome * 100, 2, True))
		endif
		


		'sublicences
		if licence.GetSubLicenceCount() > 0
			local subLicencesNode:TxmlNode = node.AddChild("children")
			For local subLicence:TProgrammeLicence = EachIn licence.subLicences
				SaveV3ProgrammeLicence(subLicencesNode, subLicence)
			Next
		endif
	End Method


	Method SaveLocalizedString:int(node:TXmlNode, groupName:string, locale:TLocalizedString)
		local found:int  = 0
		For local language:string = EachIn locale.values.Keys()
			if string(locale.values.ValueForKey(language)) <> "" then found :+ 1
		Next
		if found = 0 then return False


		local groupNode:TXmlNode = node.AddChild(groupName)
		For local language:string = EachIn locale.values.Keys()
			local value:string = string(locale.values.ValueForKey(language))
			if value <> "" then groupNode.addTextChild(language, null, value)
		Next

		return True
	End Method
End Type





Type TMetaDataCollection
	Field entries:TMap = CreateMap()
	Field entriesCount:int = -1
	Field _entriesMapEnumerator:TNodeEnumerator {nosave}
	Global _instance:TMetaDataCollection


	'override
	Function GetInstance:TMetaDataCollection()
		if not _instance then _instance = new TMetaDataCollection
		return _instance
	End Function


	Method Initialize:TMetaDataCollection()
		entries.Clear()
		entriesCount = -1

		return self
	End Method


	Method GetByGUID:TData(GUID:String)
		Return TData(entries.ValueForKey(GUID))
	End Method


	Method GetCount:Int()
		if entriesCount >= 0 then return entriesCount

		entriesCount = 0
		For Local base:TGameObject = EachIn entries.Values()
			entriesCount :+1
		Next
		return entriesCount
	End Method


	Method Add:int(GUID:string, obj:TData)
		if entries.Insert(guid, obj)
			'invalidate count
			entriesCount = -1

			return TRUE
		endif

		return False
	End Method


	Method Remove:int(GUID:string)
		if GUID and entries.Remove(GUID)
			'invalidate count
			entriesCount = -1

			return True
		endif

		return False
	End Method


	'=== ITERATOR ===
	'for "EachIn"-support

	'Set iterator to begin of array
	Method ObjectEnumerator:TMetaDataCollection()
		_entriesMapEnumerator = entries.Values()._enumerator
		Return Self
	End Method
	

	'checks if there is another element
	Method HasNext:Int()
		Return _entriesMapEnumerator.HasNext()
	End Method


	'return next element, and increase position
	Method NextObject:Object()
		Return _entriesMapEnumerator.NextObject()
	End Method
End Type

'===== CONVENIENCE ACCESSOR =====
'return collection instance
Function GetMetaDataCollection:TMetaDataCollection()
	Return TMetaDataCollection.GetInstance()
End Function
